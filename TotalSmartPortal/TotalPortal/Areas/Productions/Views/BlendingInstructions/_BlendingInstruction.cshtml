@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Productions.ViewModels.BlendingInstructionViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.HiddenFor(model => model.BlendingInstructionID)
    @Html.HiddenFor(model => model.ParentID)
    
    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")


        <div class="form-group">
            @Html.LabelFor(model => model.Code)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.Code).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VoucherDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => model.VoucherDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.VoucherDate, "", new { @class = "text-danger" })
            </div>
        </div>


        @if (@Model.Voidable || @Model.UnVoidable || @Model.VoidTypeID > 0)
        { //Don't render when in Edit Mode, so: do not add VoidType.VoidTypeID [Required] DataAnnotations to the view to submit to controller when edit
            <div class="form-group">
                @Html.EditorFor(d => d.VoidType, new { VoidTypeClassSpecialEditable = @Model.Voidable ? "SpecialEditable": null, VoidTypeLabel = "Lý do thanh lý" })
            </div>
        }

    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H3">

            @Html.EditorFor(d => d.Commodity, new { CommodityDescriptionHidden = "false", CommodityDisplayCode = @Model.GetDisplayName(m => m.Commodity) })


            <div class="form-group">
                <div class="right-panel-label right-panel-label-whole-width">
                    @Html.LabelFor(model => model.Jobs)
                </div>
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => model.Jobs).HtmlAttributes(new { @class = "right-panel-input right-panel-input-whole-width" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => model.Jobs, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.BlendingInstructionViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.BlendingInstructionDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= BlendingInstructionDetailID #" + "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].BlendingInstructionDetailID' value='#= BlendingInstructionDetailID #' />");
                    columns.Bound(p => p.BlendingInstructionID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= BlendingInstructionID #" + "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].BlendingInstructionID' value='#= BlendingInstructionID #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(98)
                        .ClientTemplate("<div> #= CommodityCode #</div>" +
                                "<div> #= (VoidTypeName == null)? '' : VoidTypeName #</div>" +
                                "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(207).HtmlAttributes(new { style = "" })
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(70)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.QuantityIssued).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(60)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityIssued) #" + "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].QuantityIssued' value='#= QuantityIssued #' />");

                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(60)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");

                    columns.Bound(p => p.Remarks).DisplayNameTitle().Width(327)
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                    columns.Bound(p => p.InActivePartial).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (InActivePartial == null)? '' : InActivePartial #" + "<input type='hidden' name='BlendingInstructionViewDetails[#= index(data) #].InActivePartial' value='#= (InActivePartial == null) ? '' : InActivePartial #' />");

                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(10).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center", @style = "padding-left:0px; padding-right:0px;" });

                    columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(10).Hidden(!@Model.Voidable && !@Model.UnVoidable)
                        .ClientTemplate("<a class='k-button' style='padding-left:0px; padding-right:0px' onclick='callVoidDetail(#= BlendingInstructionDetailID #)'><span class='k-icon sbt-void'></span></a>");

                    columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(6).Hidden(Model.Editable)
                        .ClientTemplate("<a class='k-button' style='padding-left:0px; padding-right:0px' onclick='callRemarkDetail(#= BlendingInstructionDetailID #)'><span class='k-icon sbt-remarks'></span></a>");
                })
                    .Filterable(f => f.Enabled(false))
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            toolbar.Template(@<text>
                                <button type="button" class="k-button" onclick="$('#kendoGridDetails').data('kendoGrid').addRow()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Thêm NVL </button>

                                <span style="float:right">
                                    @Html.Partial("~/Views/Helpers/Commons/_Import.cshtml")
                                </span>

                            </text>);
                        }
                        else
                        {
                            toolbar.Template(@<text> @Commons.Toolbars.BlankToolbar() </text>);
                        }
                    })

                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .Events(events =>
                    {
                        events.DataBound(@<text>
                            function(e) {

                            var grid = $("#kendoGridDetails").data("kendoGrid");
                            var data = grid.dataSource.data();
                            $.each(data, function (i, row) {
                            var isWarrantyClaim = row.VoidTypeName;
                            if (isWarrantyClaim != null && isWarrantyClaim != '') {
                            $('tr[data-uid="' + row.uid + '"]').addClass("isBonus");
                            }
                            });
                            }
                        </text>);
                        events.Edit("kendoGridDetailsEdit");
                    }).DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .ServerOperation(false)
                        .Model(model =>
                        {
                            model.Id(x => x.BlendingInstructionDetailID);
                            model.Field(m => m.BlendingInstructionDetailID).DefaultValue(0);
                            model.Field(m => m.BlendingInstructionID).DefaultValue(@Model.BlendingInstructionID);
                        })
                        .Events(events =>
                        {
                            events.Change("dataSourceChange");
                            events.Error("kendGrid_ErrorHandler");
                        })
                        .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                        .Aggregates(a => a.Add(x => x.Quantity).Sum())
                        .Aggregates(a => a.Add(x => x.QuantityIssued).Sum())
                        .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                    )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>

        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "BlendingInstructions")"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "BlendingInstructions")" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/Save-Verify-32.png" /> Lưu và duyệt </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "BlendingInstructions")" onclick="$('#Approved').val(true); $('#PrintAfterClosedSubmit').val(true);"> <img src="~/Content/Images/New/Print-Gray-32.png" /> Lưu, duyệt và in </button>
            }
            else
            {
                if (Model.Approved && !Model.Approvable && !Model.UnApprovable)
                {
                    <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", "BlendingInstructions", new {id = @Model.BlendingInstructionID })'"> <img src="~/Content/Images/Mains/@(!@Model.Approved ? "Check-32-CHY.png" : "cloud-32-NoCheck.png")" /> @(!Model.Approved ? Model.ApproveWarning : Model.UnApproveWarning) </button>
                }
            }
            @if (Model.BlendingInstructionID > 0)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", "BlendingInstructions", new { id = @Model.BlendingInstructionID })'"> <img src="~/Content/Images/New/printer-cashier-32.png" /> In </button>
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", "BlendingInstructions", new { id = @Model.BlendingInstructionID })/1'"> <img src="~/Content/Images/New/Print-Gray-32.png" /> In chi tiết phụ gia </button>
            }

        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")
    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    function callVoidDetail(blendingInstructionDetailID) {
        require(["kpopupWindow"], function (kpopupWindow) {
            var voidDetailWindow = new kpopupWindow();
            voidDetailWindow.openWindow($("#popupWindow"), "@Url.Action("VoidDetail", "BlendingInstructions")" + "/" + $("#BlendingInstructionID").val() + "/" + blendingInstructionDetailID, "Hủy/ phục hồi một phần đơn hàng", @Settings.PopupWidthVoid,  @Settings.PopupHeightSmall);
        });
    }

    function callRemarkDetail(blendingInstructionDetailID) {
        require(["kpopupWindow"], function (kpopupWindow) {
            var voidDetailWindow = new kpopupWindow();
            voidDetailWindow.openWindow($("#popupWindow"), "@Url.Action("RemarkDetail", "BlendingInstructions")" + "/" + $("#BlendingInstructionID").val() + "/" + blendingInstructionDetailID, "Nhập ghi chú", @Settings.PopupWidthSmall,  @Settings.GridPopupNoTabHeight);
        });
    }

    kendoGridDetailsEdit = function(e){
        window.bomCommodityID = e.model.CommodityID;
        window.moldCommodityID = e.model.CommodityID;
    }

    dataSourceChange = function (e) {
        if (e.field === "Quantity") {
            var dataRow = e.items[0];
            dataRow.set("QuantityRemains", DoRound(dataRow.Quantity - dataRow.QuantityIssued, requireConfig.websiteOptions.rndQuantity));
        }
    }
</script>