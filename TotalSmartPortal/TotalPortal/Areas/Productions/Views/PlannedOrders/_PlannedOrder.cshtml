@using TotalBase.Enums;
@using TotalPortal.Configuration

@using TotalDTO;
@using TotalModel
@using TotalDTO.Productions
@using TotalPortal.Areas.Productions.ViewModels

@model IPlannedOrderViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.HiddenFor(model => (model as IPlannedOrderPrimitiveDTO).PlannedOrderID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")


        <div class="form-group">
            @Html.LabelFor(model => (model as IPlannedOrderPrimitiveDTO).Code)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => (model as IPlannedOrderPrimitiveDTO).Code).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IPlannedOrderPrimitiveDTO).Code, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => (model as IPlannedOrderPrimitiveDTO).VoucherDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => (model as IPlannedOrderPrimitiveDTO).VoucherDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IPlannedOrderPrimitiveDTO).VoucherDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => (model as IPlannedOrderPrimitiveDTO).DeliveryDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => (model as IPlannedOrderPrimitiveDTO).DeliveryDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IPlannedOrderPrimitiveDTO).DeliveryDate, "", new { @class = "text-danger" })
            </div>
        </div>


        @if (@Model.Voidable || @Model.UnVoidable || @Model.VoidTypeID > 0)
        { //Don't render when in Edit Mode, so: do not add VoidType.VoidTypeID [Required] DataAnnotations to the view to submit to controller when edit
            <div class="form-group">
                @Html.EditorFor(d => (d as IPlannedOrderDTO).VoidType, (@Model.Voidable ? new { VoidTypeClassSpecialEditable = "SpecialEditable" } : null))
            </div>
        }

    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H2">
            @Html.EditorFor(d => (d as IPlannedOrderDTO).Customer, new { CustomerDescriptionHidden = "false", CustomerDisplayName = @Model.Customer.GetDisplayName(m => m.CustomerID) })

            <div class="form-group">
                <div class="right-panel-label right-panel-label-whole-width">
                    @Html.LabelFor(model => (model as IPlannedOrderPrimitiveDTO).Purposes)
                </div>
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => (model as IPlannedOrderPrimitiveDTO).Purposes).HtmlAttributes(new { @class = "right-panel-input" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => (model as IPlannedOrderPrimitiveDTO).Purposes, "", new { @class = "text-danger" })
                </div>
            </div>


            <div id="show-current-PriceCategory" style="float: right; margin-top: -120px; text-align: center; width: 110px; height: 110px; " title="Kho hàng">
                <div style="height: 90px; padding-left: 22px; padding-right: 22px; padding-top: 32px;">
                    <span style="color:blue;" id="">KHSX</span>
                    <span style="color:blue;" id=""> @(Model.IsItem? "MÀNG": "KHAY") </span>
                </div>
            </div>
        </div>


        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.PlannedOrderViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.PlannedOrderDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= PlannedOrderDetailID #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].PlannedOrderDetailID' value='#= PlannedOrderDetailID #' />");
                    columns.Bound(p => p.PlannedOrderID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= PlannedOrderID #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].PlannedOrderID' value='#= PlannedOrderID #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(168)
                        .ClientTemplate("<div> #= CommodityCode #</div>" +
                                "<div> #= (VoidTypeName == null)? '' : VoidTypeName #</div>" +
                                "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(@Model.IsItem ? 80 : 127).HtmlAttributes(new { style = "" })
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");
                    
                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                    columns.Bound(p => p.PiecePerPack).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(50).Hidden(Model.IsProduct ? false : true)
                        .ClientTemplate("#= (PiecePerPack == null)? '' : PiecePerPack #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].PiecePerPack' value='#= (PiecePerPack == null) ? '' : PiecePerPack #' />");

                    columns.Bound(p => p.CombineIndex).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(50).Hidden(Model.IsProduct ? false : true)
                        .ClientTemplate("#= (CombineIndex == null)? '' : CombineIndex #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].CombineIndex' value='#= (CombineIndex == null) ? '' : CombineIndex #' />");

                    columns.Bound(p => p.MoldID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= MoldID #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].MoldID' value='#= MoldID #' />");
                    columns.Bound(p => p.MoldCode).DisplayNameTitle().Width(60).Hidden(Model.IsProduct ? false : true)
                        .ClientTemplate("#= (MoldCode == null)? '' : MoldCode #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].MoldCode' value='#= (MoldCode == null) ? '' : MoldCode #' />");
                    columns.Bound(p => p.MoldQuantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(50).Hidden(Model.IsProduct ? false : true)
                        .Format(Settings.kfmN0)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', MoldQuantity) #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].MoldQuantity' value='#= DoRound(MoldQuantity, " + GlobalEnums.rndN0 + ") #' />");

                    columns.Bound(p => p.BomID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= BomID #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].BomID' value='#= BomID #' />");
                    columns.Bound(p => p.BomCode).Title(Model.IsProduct ? "Mã màng" : "Mã công thức").Width(196)
                        .ClientTemplate("#= (BomCode == null)? '' : BomCode #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].BomCode' value='#= BomCode #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");
                    columns.Bound(p => p.BlockUnit).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmN0)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', BlockUnit) #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].BlockUnit' value='#= BlockUnit #' />");
                    columns.Bound(p => p.BlockQuantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', BlockQuantity) #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].BlockQuantity' value='#= BlockQuantity #' />");


                    columns.Bound(p => p.QuantityRequested).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(70)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRequested) #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].QuantityRequested' value='#= QuantityRequested #' />");
                    columns.Bound(p => p.QuantityOnhand).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(70)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityOnhand) #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].QuantityOnhand' value='#= QuantityOnhand #' />");
                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(70)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.MaterialAddedPercentage).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(50).Hidden(!@Model.IsItem)
                        .Format(Settings.kfmN0)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', MaterialAddedPercentage) #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].MaterialAddedPercentage' value='#= MaterialAddedPercentage #' />");
                    columns.Bound(p => p.QuantityMaterial).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(70).Hidden(!@Model.IsItem)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityMaterial) #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].QuantityMaterial' value='#= QuantityMaterial #' />");
                    
                    columns.Bound(p => p.Remarks).DisplayNameTitle().Width(68).Hidden()
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                    columns.Bound(p => p.InActivePartial).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (InActivePartial == null)? '' : InActivePartial #" + "<input type='hidden' name='PlannedOrderViewDetails[#= index(data) #].InActivePartial' value='#= (InActivePartial == null) ? '' : InActivePartial #' />");

                    columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(5).Hidden(!@Model.IsItem)
                        .ClientTemplate("<a class='k-button' title = 'Kiểm tra tồn nguyên vật liệu' style='padding-left:0px; padding-right:0px' onclick='showBoms(#= BomID #, #= QuantityMaterial #)'><span class='k-icon sbt-add-bom'></span></a>");
                    
                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(10).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center", @style="padding-left:0px; padding-right:0px"});

                    columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(10).Hidden(!@Model.Voidable && !@Model.UnVoidable)
                        .ClientTemplate("<a class='k-button' style='padding-left:0px; padding-right:0px' onclick='callVoidDetail(#= PlannedOrderDetailID #)'><span class='k-icon sbt-void'></span></a>");
                })
                    .Filterable(f => f.Enabled(false))
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            toolbar.Template(@<text>
                                <button type="button" class="k-button" onclick="$('#kendoGridDetails').data('kendoGrid').addRow()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Thêm mặt hàng </button>

                                <span style="float:right">
                                    @Html.Partial("~/Views/Helpers/Commons/_Import.cshtml")
                                </span>

                            </text>);
                        }
                        else
                        {
                            toolbar.Template(@<text> @Commons.Toolbars.BlankToolbar() </text>);
                        }
                    })

                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .Events(events =>
                    {
                        events.DataBound(@<text>
                            function(e) {

                            var grid = $("#kendoGridDetails").data("kendoGrid");
                            var data = grid.dataSource.data();
                            $.each(data, function (i, row) {
                            var isWarrantyClaim = row.VoidTypeName;
                            if (isWarrantyClaim != null && isWarrantyClaim != '') {
                            $('tr[data-uid="' + row.uid + '"]').addClass("isBonus");
                            }
                            });
                            }
                        </text>);
                        events.Edit("kendoGridDetailsEdit");
                    }).DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.PlannedOrderDetailID);
                        model.Field(m => m.PlannedOrderDetailID).DefaultValue(0);
                        model.Field(m => m.PlannedOrderID).DefaultValue(@Model.PlannedOrderID);
                        model.Field(m => m.MaterialAddedPercentage).DefaultValue(@Model.IsItem ? 12 : 0);
                    })
                    .Events(events =>
                    {
                        events.Change("dataSourceChange");
                        events.Error("kendGrid_ErrorHandler");
                    })
                    .Aggregates(a => a.Add(x => x.BomCode).Count())
                    .Aggregates(a => a.Add(x => x.QuantityRequested).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityOnhand).Sum())
                    .Aggregates(a => a.Add(x => x.Quantity).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityMaterial).Sum())
                )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseDTO).Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseDTO).Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseDTO).Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseModel).Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseModel).Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseModel).Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>

        @if (Model.IsProduct) { 
            @Html.Partial("~/Views/Helpers/Commons/_PlannedOrderLogs.cshtml")
        }

        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Save" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/save-verify-icon.png" /> Lưu, nhập tiếp </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/Save-Verify-32.png" /> Lưu và duyệt </button>
            }

            @if (Model.PlannedOrderID > 0 && !Model.Approvable && !Model.UnApprovable)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", Model.ControllerName, new {id = @Model.PlannedOrderID })'"> <img src="~/Content/Images/Mains/@(!@Model.Approved ? "Check-32-CHY.png" : "cloud-32-NoCheck.png")" /> @(!Model.Approved ? Model.ApproveWarning : Model.UnApproveWarning) </button>
            }

        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")
    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    function showBoms(bomID, quantity) {
        require(["kpopupWindow"], function (kpopupWindow) {
            quantity = Math.round(quantity);
            var bomWindow = new kpopupWindow();
            bomWindow.openWindow($("#popupWindow"), "@Url.Action("Boms", Model.ControllerName)" + "/" + bomID + "/" + quantity, "Kiểm tra tồn nguyên vật liệu", @Settings.PopupWidthMedium, @Settings.PopupHeightWithTab);
        });
    }

    function callVoidDetail(plannedOrderDetailID) {
        require(["kpopupWindow"], function (kpopupWindow) {
            var voidDetailWindow = new kpopupWindow();
            voidDetailWindow.openWindow($("#popupWindow"), "@Url.Action("VoidDetail", Model.ControllerName)" + "/" + $("#PlannedOrderID").val() + "/" + plannedOrderDetailID, "Hủy/ phục hồi một phần đơn hàng", @Settings.PopupWidthVoid,  @Settings.PopupHeightSmall);
        });
    }

    kendoGridDetailsEdit = function(e){
        window.bomCommodityID = e.model.CommodityID;
        window.moldCommodityID = e.model.CommodityID;
    }

    dataSourceChange = function (e) {
        if (e.field === "QuantityOnhand" || e.field === "QuantityRequested" || e.field === "Quantity" || e.field === "MaterialAddedPercentage") {
            var dataRow = e.items[0];

            if (e.field === "Quantity" || e.field === "MaterialAddedPercentage")
            {
                dataRow.set("QuantityMaterial", DoRound(dataRow.Quantity + dataRow.Quantity * dataRow.MaterialAddedPercentage/100, requireConfig.websiteOptions.rndQuantity));
            }
            else
            {
                if (dataRow.QuantityRequested >= dataRow.QuantityOnhand) {
                    dataRow.set("Quantity", DoRound(dataRow.QuantityRequested - dataRow.QuantityOnhand, requireConfig.websiteOptions.rndQuantity));
                }
                else {
                    dataRow.set("Quantity", 0);
                }
            }
        }
    }
</script>