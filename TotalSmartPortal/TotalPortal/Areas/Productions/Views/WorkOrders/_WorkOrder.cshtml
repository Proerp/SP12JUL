@using TotalBase.Enums;
@using TotalPortal.Configuration

@using TotalDTO;
@using TotalModel
@using TotalDTO.Productions
@using TotalPortal.Areas.Productions.ViewModels

@model IWorkOrderViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.HiddenFor(model => (model as IWorkOrderPrimitiveDTO).WorkOrderID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")

        @Html.HiddenFor(model => (model as IWorkOrderPrimitiveDTO).ProductionOrderID)
        @Html.HiddenFor(model => (model as IWorkOrderPrimitiveDTO).ProductionOrderDetailID)

        @Html.HiddenFor(model => (model as IWorkOrderPrimitiveDTO).PlannedOrderID)
        @Html.HiddenFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderID)

        @Html.HiddenFor(model => (model as IWorkOrderPrimitiveDTO).BomID)

        <div class="SBT-Hidden">
            @Html.EditorFor(d => (d as IWorkOrderDTO).Warehouse, new { WarehouseDisplayName = @Model.Warehouse.GetDisplayName(m => m.WarehouseID) })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderReference)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderReference).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderReference, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderCode)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderCode).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderEntryDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderEntryDate, "", new { @class = "text-danger" })
            </div>
        </div>



    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H2">

            @Html.EditorFor(d => (d as IWorkOrderDTO).Customer, new { CustomerDisplayName = @Model.Customer.GetDisplayName(m => m.CustomerID), CustomerIcon = "Customer Red 24.png", NullCustomer = (Model.CustomerID > 0 ? null : "Lệnh sản xuất tổng hợp của nhiều khách hàng"), CustomerInfo = (Model.CustomerID > 0 ? null : "#") })

            @Html.HiddenFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderSpecs)
            @Html.HiddenFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderSpecification)
            <div class="right-first-panel">
                <div class="form-group">
                    <div class="right-panel-label">
                        @Html.LabelFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderSpecificationSpecs)
                    </div>
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderSpecificationSpecs).HtmlAttributes(new { @class = "right-panel-input", @readonly = "readonly" })
                    </div>
                    <div class="div-validation-message">
                        @Html.ValidationMessageFor(model => (model as IWorkOrderPrimitiveDTO).FirmOrderSpecificationSpecs, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="right-second-panel">
                <div class="form-group">
                    <div class="right-panel-label">
                        @Html.LabelFor(model => (model as IWorkOrderPrimitiveDTO).QuantityMaterialEstimatedRemains)
                    </div>
                    <div class="div-input">
                        @Html.Kendo().NumericTextBoxFor(model => (model as IWorkOrderPrimitiveDTO).QuantityMaterialEstimatedRemains).HtmlAttributes(new { @class = "right-panel-input only-here", @readonly = "readonly" })
                    </div>
                    <div class="div-validation-message">
                        @Html.ValidationMessageFor(model => (model as IWorkOrderPrimitiveDTO).QuantityMaterialEstimatedRemains, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div id="show-current-PriceCategory" style="float: right; margin-top: -120px; text-align: center; width: 110px; height: 110px; " title="Kho hàng">
                <div style="height: 90px; padding-left: 22px; padding-right: 22px; padding-top: 32px;">
                    <span style="color:blue;" id="label_WarehouseCode"> @Html.Label(@Model.Warehouse.Code) </span>
                </div>
            </div>
        </div>


        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.WorkOrderViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.WorkOrderDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= WorkOrderDetailID #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].WorkOrderDetailID' value='#= WorkOrderDetailID #' />");
                    columns.Bound(p => p.WorkOrderID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= WorkOrderID #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].WorkOrderID' value='#= WorkOrderID #' />");


                    columns.Bound(p => p.FirmOrderMaterialID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (FirmOrderMaterialID == null)? '' : FirmOrderMaterialID #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].FirmOrderMaterialID' value='#= (FirmOrderMaterialID == null) ? '' : FirmOrderMaterialID #' />");

                    columns.Bound(p => p.BomID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (BomID == null)? '' : BomID #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].BomID' value='#= (BomID == null) ? '' : BomID #' />");
                    columns.Bound(p => p.BomDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (BomDetailID == null)? '' : BomDetailID #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].BomDetailID' value='#= (BomDetailID == null) ? '' : BomDetailID #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(200)
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(190).HtmlAttributes(new { style = "" })
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                    columns.Bound(p => p.Remarks).DisplayNameTitle()
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");


                    columns.Bound(p => p.FirmOrderMaterialQuantity).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', FirmOrderMaterialQuantity) #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].FirmOrderMaterialQuantity' value='#= FirmOrderMaterialQuantity #' />");
                    columns.Bound(p => p.FirmOrderMaterialQuantityIssued).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', FirmOrderMaterialQuantityIssued) #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].FirmOrderMaterialQuantityIssued' value='#= FirmOrderMaterialQuantityIssued #' />");
                    
                    
                    columns.Bound(p => p.BlockQuantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(80)
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', BlockQuantity) #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].BlockQuantity' value='#= BlockQuantity #' />");
                    
                    columns.Bound(p => p.LayerCode).DisplayNameTitle().Width(20).Hidden(GlobalEnums.CBPP || @Model.IsItem).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" })
                        .ClientTemplate("#= (LayerCode == null)? '' : LayerCode #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].LayerCode' value='#= (LayerCode == null) ? '' : LayerCode #' />");

                    columns.Bound(p => p.LayerQuantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', LayerQuantity) #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].LayerQuantity' value='#= LayerQuantity #' />");
                    
                    columns.Bound(p => p.BlockUnit).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', BlockUnit) #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].BlockUnit' value='#= BlockUnit #' />");

                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(80)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.QuantityAvailables).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityAvailables) #" + "<input type='hidden' name='WorkOrderViewDetails[#= index(data) #].QuantityAvailables' value='#= QuantityAvailables #' />");
                })
                .Filterable(f => f.Enabled(false))
                .Navigatable()

                .ToolBar(toolbar =>
                {
                    toolbar.Template(@<text>
                        <span style="float:right">
                            @Html.LabelFor(model => (model as IWorkOrderPrimitiveDTO).QuantityMaterialEstimated)
                            @Html.Kendo().NumericTextBoxFor(model => (model as IWorkOrderPrimitiveDTO).QuantityMaterialEstimated).HtmlAttributes(new { @style = "width: 118px;" }).Events(e => e.Change("updateQuantities").Spin("updateQuantities"))
                        </span>
                    </text>);                    
                })

                .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                .Selectable(settings =>
                {
                    settings.Mode(GridSelectionMode.Multiple);
                    settings.Type(GridSelectionType.Row);
                })
                .Events(events =>
                        {
                            events.DataBound("colorLayerCode");
                        })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.WorkOrderDetailID);
                        model.Field(m => m.WorkOrderDetailID).DefaultValue(0);
                        model.Field(m => m.WorkOrderID).DefaultValue(@Model.WorkOrderID);
                    })
                    .Events(events =>
                    {
                        events.Error("kendGrid_ErrorHandler");
                    })
                    .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                    .Aggregates(a => a.Add(x => x.BlockQuantity).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityAvailables).Sum())
                    .Aggregates(a => a.Add(x => x.Quantity).Sum())
                )
)
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseDTO).Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseDTO).Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseDTO).Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseModel).Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseModel).Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseModel).Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>




        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/Save-Verify-32.png" /> Lưu và duyệt </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(true); $('#PrintAfterClosedSubmit').val(true);"> <img src="~/Content/Images/New/Print-Gray-32.png" /> Lưu, duyệt và in </button>
            }
            else
            {
                if (Model.Approved && !Model.Approvable && !Model.UnApprovable)
                {
                    <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", Model.ControllerName, new {id = @Model.WorkOrderID })'"> <img src="~/Content/Images/Mains/cloud-32-NoCheck.png" /> @Model.UnApproveWarning </button>
                }
            }

            @if (Model.WorkOrderID > 0)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", Model.ControllerName, new { id = @Model.WorkOrderID })'"> <img src="~/Content/Images/New/printer-cashier-32.png" /> In </button>
            }
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")
    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>
<script src="@Url.Content("~/Scripts/Controllers/Commons/Boms/ColorLayerCode.js")"></script>

<script type="text/javascript">
    function updateQuantities() {
        var quantityMaterialEstimated = DoRound($("#QuantityMaterialEstimated").val(), requireConfig.websiteOptions.rndQuantity);
        var quantityMaterialEstimatedRemains = DoRound($("#QuantityMaterialEstimatedRemains").val(), requireConfig.websiteOptions.rndQuantity);

        var kenGrid = $("#kendoGridDetails").data("kendoGrid");
        kenGrid.bind("dataBinding", function (e) { e.preventDefault(); }); //You can prevent the data bind action at the dataBinding event, when updating multiple model properties
        
        var allDataRows = kenGrid.dataSource.data();
        for (var i = 0; i < allDataRows.length; i++) {
            var dataItem = allDataRows[i];

            var quantity = (quantityMaterialEstimated == quantityMaterialEstimatedRemains ? dataItem.FirmOrderMaterialQuantity - dataItem.FirmOrderMaterialQuantityIssued : (((quantityMaterialEstimated * dataItem.BlockUnit) / 100) * (dataItem.BlockQuantity / dataItem.LayerQuantity)));

            dataItem.set("Quantity", DoRound(quantity, requireConfig.websiteOptions.rndQuantity));
        }

        kenGrid.unbind("dataBinding"); //When finish modifying the data, unbind dataBinding event
        kenGrid.refresh(); //Then, finally, refresh grid
    }
</script>

<style>
    .only-here {
        width: 39%;
    }
</style>