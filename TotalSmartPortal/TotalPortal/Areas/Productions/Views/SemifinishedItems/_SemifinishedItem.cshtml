@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Productions.ViewModels.SemifinishedItemViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.HiddenFor(model => model.SemifinishedItemID)

    @Html.HiddenFor(model => model.MaterialIssueID)

    @Html.HiddenFor(model => model.ProductionLineID)
    @Html.HiddenFor(model => model.ProductionLineCode)

    @Html.HiddenFor(model => model.BomID)
    @Html.HiddenFor(model => model.BomCode)
    @Html.HiddenFor(model => model.MaterialQuantity)
    @Html.HiddenFor(model => model.MaterialQuantityRemains)

    @Html.HiddenFor(model => model.TotalQuantityFailure)

    <div class="left-panel">

        <div class="SBT-Hidden">
            @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")
        </div>
        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Shift.cshtml")

        <div class="form-group">
            @Html.EditorFor(d => d.CrucialWorker, new { EmployeeDisplayName = @Model.GetDisplayName(m => m.CrucialWorker) })
        </div>

        @Html.HiddenFor(model => model.PlannedOrderID)
        @Html.HiddenFor(model => model.FirmOrderID)
        @if (true)
        {
            <div class="form-group">
                <a style="color: #428bca; " href="@Url.Action("Edit", "PlannedItems", new { area = "Productions", id = Model.PlannedOrderID })" target="_blank"> @Html.LabelFor(model => model.FirmOrderReference) </a>
                
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => model.FirmOrderReference).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => model.FirmOrderReference, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FirmOrderCode)
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => model.FirmOrderCode).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => model.FirmOrderCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FirmOrderEntryDate)
                <div class="div-input">
                    @Html.Kendo().DateTimePickerFor(model => model.FirmOrderEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => model.FirmOrderEntryDate, "", new { @class = "text-danger" })
                </div>
            </div>
        }

    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H2">

            @Html.EditorFor(d => d.Customer, new { CustomerDisplayName = @Model.GetDisplayName(m => m.Customer), CustomerIcon = "Customer Red 24.png", NullCustomer = (Model.CustomerID > 0 ? null : "Lệnh sản xuất tổng hợp của nhiều khách hàng"), CustomerInfo = (Model.CustomerID > 0 ? null : "#") })

            <div class="form-group">
                <div class="right-panel-label right-panel-label-whole-width">
                    @Html.LabelFor(model => model.WorkDescription)
                </div>
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => model.WorkDescription).HtmlAttributes(new { @class = "right-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => model.WorkDescription, "", new { @class = "text-danger" })
                </div>
            </div>


            <div id="show-current-PriceCategory" style="float: right; margin-top: -120px; text-align: center; width: 110px; height: 110px; " title="Kho hàng">
                <div style="height: 90px; padding-left: 22px; padding-right: 22px; padding-top: 22px;">
                    <span style="color:blue;"> @Html.Label(@Model.Reference != null? @Model.Reference: " ") </span>
                    <span style="color:blue;"> @Html.Label(@Model.EntryDate.ToString()) </span>
                </div>
            </div>
        </div>


        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.SemifinishedItemViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.SemifinishedItemDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= SemifinishedItemDetailID #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].SemifinishedItemDetailID' value='#= SemifinishedItemDetailID #' />");
                    columns.Bound(p => p.SemifinishedItemID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= SemifinishedItemID #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].SemifinishedItemID' value='#= SemifinishedItemID #' />");


                    columns.Bound(p => p.FirmOrderID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (FirmOrderID == null)? '' : FirmOrderID #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].FirmOrderID' value='#= (FirmOrderID == null) ? '' : FirmOrderID #' />");
                    columns.Bound(p => p.FirmOrderDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (FirmOrderDetailID == null)? '' : FirmOrderDetailID #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].FirmOrderDetailID' value='#= (FirmOrderDetailID == null) ? '' : FirmOrderDetailID #' />");

                    columns.Bound(p => p.PlannedOrderID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (PlannedOrderID == null)? '' : PlannedOrderID #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].PlannedOrderID' value='#= (PlannedOrderID == null) ? '' : PlannedOrderID #' />");
                    columns.Bound(p => p.PlannedOrderDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (PlannedOrderDetailID == null)? '' : PlannedOrderDetailID #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].PlannedOrderDetailID' value='#= (PlannedOrderDetailID == null) ? '' : PlannedOrderDetailID #' />");

                    columns.Bound(p => p.BomCode).DisplayNameTitle().Width(127).Hidden()
                        .ClientTemplate("#= (BomCode == null)? '' : BomCode #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].BomCode' value='#= (BomCode == null) ? '' : BomCode #' />");
                    
                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(230).EditorTemplateName("StringReadonly").Hidden()
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(150).Hidden()
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");
                    columns.Bound(p => p.PiecePerPack).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Hidden()
                        .ClientTemplate("#= (PiecePerPack == null)? '' : PiecePerPack #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].PiecePerPack' value='#= (PiecePerPack == null) ? '' : PiecePerPack #' />");

                    columns.Bound(p => p.MoldQuantity).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmN0)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', MoldQuantity) #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].MoldQuantity' value='#= MoldQuantity #' />");

                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" })
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");
                    columns.Bound(p => p.MaterialIssueRemains).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" })
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', MaterialIssueRemains) #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].MaterialIssueRemains' value='#= MaterialIssueRemains #' />");
                    
                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");
                    columns.Bound(p => p.QuantityFailure).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityFailure) #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].QuantityFailure' value='#= QuantityFailure #' />");


                    columns.Bound(p => p.StartDate).DisplayNameTitle().Width(120).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" })
                        .Format("{0:" + @Settings.DateTimeFormat + "}")
                        .ClientTemplate("#= (StartDate == null)? '' : kendo.format('{0:" + @Settings.DateTimeFormat + "}', StartDate) #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].StartDate' value='#= (StartDate == null) ? '' : kendo.format('{0:" + @Settings.DateTimeFormat + "}', StartDate) #' />");
                    columns.Bound(p => p.StopDate).DisplayNameTitle().Width(120).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" })
                        .Format("{0:" + @Settings.DateTimeFormat + "}")
                        .ClientTemplate("#= (StopDate == null)? '' : kendo.format('{0:" + @Settings.DateTimeFormat + "}', StopDate) #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].StopDate' value='#= (StopDate == null) ? '' : kendo.format('{0:" + @Settings.DateTimeFormat + "}', StopDate) #' />");
                    columns.Bound(p => p.Temperature).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmN0)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', Temperature) #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].Temperature' value='#= Temperature #' />");
                    
                    
                    columns.Bound(p => p.Remarks).DisplayNameTitle().Width(206)
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='SemifinishedItemViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");


                    //columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });
                })
                    .Filterable(f => f.Enabled(false))
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {                            
                            toolbar.Template(@<text>
                                <button type="button" class="k-button" onclick="doCloneSelectedItem()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Thêm hỗn hợp </button>
                            </text>);
                        }
                        else
                        {
                            toolbar.Template(@<text> @Commons.Toolbars.BlankToolbar() </text>);
                        }
                    })

                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .Events(events =>
                    {
                        events.DataBound(@<text>
                            function(e) {

                            var grid = $("#kendoGridDetails").data("kendoGrid");
                            var data = grid.dataSource.data();
                            $.each(data, function (i, row) {
                            var isWarrantyClaim = row.VoidTypeName;
                            if (isWarrantyClaim != null && isWarrantyClaim != '') {
                            $('tr[data-uid="' + row.uid + '"]').addClass("isBonus");
                            }
                            });
                            }
                        </text>);
                    }).DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.SemifinishedItemDetailID);
                        model.Field(m => m.SemifinishedItemDetailID).DefaultValue(0);
                        model.Field(m => m.SemifinishedItemID).DefaultValue(@Model.SemifinishedItemID);
                    })
                    .Events(events =>
                    {
                        events.Error("kendGrid_ErrorHandler");
                    })
                    .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                    .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.Quantity).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityFailure).Sum())
                )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>


        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "SemifinishedItems")" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "SemifinishedItems")" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/Save-Verify-32.png" /> Lưu và duyệt </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "SemifinishedItems")" onclick="$('#Approved').val(true); $('#PrintAfterClosedSubmit').val(true);"> <img src="~/Content/Images/New/Print-Gray-32.png" /> Lưu, duyệt và in </button>
            }
            else
            {
                if (Model.Approved && !Model.Approvable && !Model.UnApprovable)
                {
                    <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", "SemifinishedItems", new {id = @Model.SemifinishedItemID })'"> <img src="~/Content/Images/Mains/cloud-32-NoCheck.png" /> Hủy duyệt phiếu nhập BTP </button>
                }
            }

            @if (Model.SemifinishedItemID > 0)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", "SemifinishedItems", new { id = @Model.SemifinishedItemID })'"> <img src="~/Content/Images/New/printer-cashier-32.png" /> In </button>
            }
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")        
    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    $(document.body).keydown(function (e) { if (e.keyCode === 45) { cloneSelectedItem(); } });
    function doCloneSelectedItem() {
        var kenGrid = $("#kendoGridDetails").data("kendoGrid");
        kenGrid.element.find('tbody tr:first').addClass('k-state-selected');
        cloneSelectedItem();
    }
    function tailorClonedItem(clonedItem) { clonedItem.SemifinishedItemDetailID = 0; clonedItem.Quantity = 0; }    
</script>
