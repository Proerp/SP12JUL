@using TotalBase.Enums;
@using TotalPortal.Configuration

@using TotalDTO;
@using TotalModel
@using TotalDTO.Helpers;
@using TotalDTO.Purchases
@using TotalPortal.Areas.Purchases.ViewModels

@model IGoodsArrivalViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.HiddenFor(model => (model as IQuantityDTO).TotalQuantity)
    @Html.HiddenFor(model => (model as IGoodsArrivalPrimitiveDTO).TotalPackages)

    @Html.HiddenFor(model => (model as IGoodsArrivalPrimitiveDTO).GoodsArrivalID)
    @Html.HiddenFor(model => (model as IGoodsArrivalPrimitiveDTO).HasPurchaseOrder)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml", @Model, new ViewDataDictionary { { "EntryDateReadonly", false }, { "EntryDateDisplayName", "Ngày nhận hàng" } })

        <div class="form-group">
            @Html.LabelFor(model => (model as IGoodsArrivalPrimitiveDTO).Code)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsArrivalPrimitiveDTO).Code).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IGoodsArrivalPrimitiveDTO).Code, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group SBT-Hidden">
            @Html.LabelFor(model => (model as IGoodsArrivalPrimitiveDTO).PackingList)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsArrivalPrimitiveDTO).PackingList).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IGoodsArrivalPrimitiveDTO).PackingList, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => (model as IGoodsArrivalPrimitiveDTO).CustomsDeclaration)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsArrivalPrimitiveDTO).CustomsDeclaration).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IGoodsArrivalPrimitiveDTO).CustomsDeclaration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => (model as IGoodsArrivalPrimitiveDTO).CustomsDeclarationDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => (model as IGoodsArrivalPrimitiveDTO).CustomsDeclarationDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IGoodsArrivalPrimitiveDTO).CustomsDeclarationDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => (model as IGoodsArrivalPrimitiveDTO).DeliveryDate)
            <div class="div-input">
                @Html.Kendo().DatePickerFor(model => (model as IGoodsArrivalPrimitiveDTO).DeliveryDate).HtmlAttributes(new { @class = "left-panel-input", type = "text" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IGoodsArrivalPrimitiveDTO).DeliveryDate, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderID)
        @Html.HiddenFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderCode)
        @Html.HiddenFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderReference)
        @if (Model.HasPurchaseOrder)
        {
            <div class="form-group">
                @if (Model.PurchaseOrderID != null)
                {
                    <a style="color: #428bca; " href="@Url.Action("Edit", @Model.PurchaseController, new { area = "Purchases", id = Model.PurchaseOrderID })" target="_blank"> Phiếu đặt hàng </a> }
                else
                {@Html.LabelFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderReferenceNote)}
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderReferenceNote).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderReferenceNote, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderCodeNote)
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderCodeNote).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderCodeNote, "", new { @class = "text-danger" })
                </div>
            </div>

            if (Model.PurchaseOrderVoucherDate != null)
            {
                <div class="form-group">
                    @Html.LabelFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderVoucherDate)
                    <div class="div-input">
                        @Html.Kendo().DateTimePickerFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderVoucherDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                    </div>
                    <div class="div-validation-message">
                        @Html.ValidationMessageFor(model => (model as IGoodsArrivalPrimitiveDTO).PurchaseOrderVoucherDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        }
        else
        {
            @Html.EditorFor(d => (d as IGoodsArrivalPrimitiveDTO).Code)
        }

        <div @{if (GlobalEnums.CBPP) { <text> class="SBT-Hidden" </text>   } else { <text> class="form-group" </text>   } }>
            @Html.EditorFor(d => (d as IGoodsArrivalDTO).Salesperson, new { EmployeeDisplayName = @Model.Salesperson.GetDisplayName(m => m.EmployeeID) })
        </div>

    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H3">

            @Html.EditorFor(d => (d as IGoodsArrivalDTO).Customer, new { CustomerDescriptionHidden = "true", CustomerDisplayName = @Model.Customer.GetDisplayName(m => m.CustomerID) })
            @Html.EditorFor(d => (d as IGoodsArrivalDTO).Transporter, new { CustomerDescriptionHidden = "true", CustomerDisplayName = @Model.Transporter.GetDisplayName(m => m.CustomerID), CustomerIcon = "Customer Red 24.png" })

            @Html.DisplayFor(d => (d as IGoodsArrivalDTO).Warehouse, "Commons/WarehouseBase")
        </div>

        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.GoodsArrivalViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.GoodsArrivalDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= GoodsArrivalDetailID #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].GoodsArrivalDetailID' value='#= GoodsArrivalDetailID #' />");
                    columns.Bound(p => p.GoodsArrivalID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= GoodsArrivalID #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].GoodsArrivalID' value='#= GoodsArrivalID #' />");

                    columns.Bound(p => p.PurchaseOrderID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (PurchaseOrderID == null)? '' : PurchaseOrderID #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].PurchaseOrderID' value='#= (PurchaseOrderID == null) ? '' : PurchaseOrderID #' />");
                    columns.Bound(p => p.PurchaseOrderDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (PurchaseOrderDetailID == null)? '' : PurchaseOrderDetailID #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].PurchaseOrderDetailID' value='#= (PurchaseOrderDetailID == null) ? '' : PurchaseOrderDetailID #' />");

                    columns.Bound(p => p.PurchaseOrderCode).DisplayNameTitle().Width(60).Hidden()
                        .ClientTemplate("#= (PurchaseOrderCode == null)? '' : PurchaseOrderCode #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].PurchaseOrderCode' value='#= (PurchaseOrderCode == null) ? '' : PurchaseOrderCode #' />");
                    columns.Bound(p => p.PurchaseOrderReference).DisplayNameTitle().Width(60).Hidden(@Model.HasPurchaseOrder && @Model.PurchaseOrderID == null ? false : true)
                        .ClientTemplate("#= (PurchaseOrderReference == null)? '' : PurchaseOrderReference #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].PurchaseOrderReference' value='#= (PurchaseOrderReference == null) ? '' : PurchaseOrderReference #' />");
                    columns.Bound(p => p.PurchaseOrderEntryDate).DisplayNameTitle().Width(80).Hidden(@Model.HasPurchaseOrder && @Model.PurchaseOrderID == null ? false : true)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (PurchaseOrderEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', PurchaseOrderEntryDate) #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].PurchaseOrderEntryDate' value='#= (PurchaseOrderEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', PurchaseOrderEntryDate) #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");

                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(118).EditorTemplateName(@Model.HasPurchaseOrder ? "StringReadonly" : "AutoCompletes/CommodityAvailable")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) #)")
                        .ClientTemplate((GlobalEnums.CBPP || GlobalEnums.DMC ? "#= CommodityCode #" : "<div> #= CommodityCode #</div>" + "<div class = 'multiline-grid'> #= CommodityName #</div>") + "<div class = 'isBonus'> #= (Remarks == null)? '' : Remarks #</div>" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(208).HtmlAttributes(new { style = "" }).Hidden(GlobalEnums.CBPP)
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");
                    
                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                    columns.Bound(p => p.Shelflife).DisplayNameTitle().Hidden().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(50)
                        .ClientTemplate("#= (Shelflife == null)? '' : Shelflife #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].Shelflife' value='#= (Shelflife == null) ? '' : Shelflife #' />");

                    columns.Bound(p => p.SealCode).DisplayNameTitle().Width(60).Hidden(!GlobalEnums.CBPP)
                        .ClientTemplate("#= (SealCode == null)? '' : SealCode #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].SealCode' value='#= (SealCode == null) ? '' : SealCode #' />");
                    columns.Bound(p => p.BatchCode).DisplayNameTitle().Width(GlobalEnums.CBPP? 180 : 60)
                        .ClientTemplate("#= (BatchCode == null)? '' : BatchCode #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].BatchCode' value='#= (BatchCode == null) ? '' : BatchCode #' />");
                    columns.Bound(p => p.LabCode).DisplayNameTitle().Width(50).Hidden(!GlobalEnums.CBPP)
                        .ClientTemplate("#= (LabCode == null)? '' : LabCode #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].LabCode' value='#= (LabCode == null) ? '' : LabCode #' />");

                    columns.Bound(p => p.ProductionDate).DisplayNameTitle().Width(60).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" })
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (ProductionDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', ProductionDate) #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].ProductionDate' value='#= (ProductionDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', ProductionDate) #' />");
                    columns.Bound(p => p.ExpiryDate).DisplayNameTitle().Width(60).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Hidden(!GlobalEnums.CBPP)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (ExpiryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', ExpiryDate) #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].ExpiryDate' value='#= (ExpiryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', ExpiryDate) #' />");
                    
                    columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(1).Hidden(Model.Editable)
                        .ClientTemplate("<a class='k-button' style='padding-left:0px; padding-right:0px' onclick='callChangeExpiryDate(#= GoodsArrivalDetailID #)'><span class='k-icon sbt-calendar'></span></a>");
                    
                    columns.Bound(p => p.Lifespan).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(30).Hidden(!GlobalEnums.CBPP)
                        .ClientTemplate("#= (Lifespan == null)? '' : Lifespan #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].Lifespan' value='#= (Lifespan == null) ? '' : Lifespan #' />");

                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(@Model.HasPurchaseOrder ? false : true)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format(Settings.kfmQuantity, sum) #")
                        .ClientTemplate("#= kendo.format(Settings.kfmQuantity, QuantityRemains) #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");
                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format(Settings.kfmQuantity, sum) #")
                        .ClientTemplate("#= kendo.format(Settings.kfmQuantity, Quantity) #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.UnitWeight).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30).Hidden(GlobalEnums.DMC)
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', UnitWeight) #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].UnitWeight' value='#= UnitWeight #' />");

                    columns.Bound(p => p.Packages).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30).Hidden(GlobalEnums.DMC)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Packages) #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].Packages' value='#= Packages #' />");

                    columns.Bound(p => p.TareWeight).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30).Hidden(!GlobalEnums.CBPP)
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', TareWeight) #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].TareWeight' value='#= TareWeight #' />");
                    
                    columns.Bound(p => p.Remarks).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='GoodsArrivalViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");
                    
                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(20).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });
                })
                    .Filterable(f => f.Enabled(false))
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            //toolbar.Create().HtmlAttributes(new { @class = "fa fa-map-marker" }).Text("Add new aa le ea1");
                            if (Model.HasPurchaseOrder == true)
                                toolbar.Template(@<text>
                                    <button type="button" class="k-button" onclick="GetPendingGoodsIssueDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng từ PO </button>
                                    <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Nhập toàn bộ </button>
                                </text>);
                            else
                                toolbar.Template(@<text>
                                <button type="button" class="k-button" onclick="$('#kendoGridDetails').data('kendoGrid').addRow()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Thêm mặt hàng </button>
                                </text>);
                        }
                        else
                        {
                            toolbar.Template(@<text> @Commons.Toolbars.BlankToolbar() </text>);
                        }
                    })

                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                .ServerOperation(false)
                .Model(model =>
                {
                    model.Id(x => x.GoodsArrivalDetailID);
                    model.Field(m => m.GoodsArrivalDetailID).DefaultValue(0);
                    model.Field(m => m.GoodsArrivalID).DefaultValue(@Model.GoodsArrivalID);
                })
                .Events(events =>
                {
                    events.Error("kendGrid_ErrorHandler");
                })
                .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                .Aggregates(a => a.Add(x => x.Quantity).Sum())
                .Aggregates(a => a.Add(x => x.Packages).Sum())
                )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseDTO).Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseDTO).Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseDTO).Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseModel).Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseModel).Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseModel).Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>


        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Save" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/save-verify-icon.png" /> Lưu, nhập tiếp </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/Save-Verify-32.png" /> Lưu và duyệt </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(true); $('#PrintAfterClosedSubmit').val(true);"> <img src="~/Content/Images/New/Print-Gray-32.png" /> Lưu, duyệt và in </button>
            }
            else
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", Model.ControllerName, new { id = @Model.GoodsArrivalID })'"> <img src="~/Content/Images/New/printer-cashier-32.png" /> In </button>
                
                if (Model.Approved && !Model.Approvable && !Model.UnApprovable)
                {
                    <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", Model.ControllerName, new {id = @Model.GoodsArrivalID })'"> <img src="~/Content/Images/Mains/cloud-32-NoCheck.png" /> @Model.UnApproveWarning </button>
                }                            
            }
            
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")

        @if (Model.Editable && !Model.HasPurchaseOrder)
        {
            <div><input style="font-size: 11px;" type="file" name="xlfile" id="xlf" /></div>
        }

    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    function GetPendingGoodsIssueDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingPurchaseOrderDetails", Model.ControllerName, new { area = "Purchases" })", "Chọn mặt hàng từ đơn đặt hàng", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }

    function callChangeExpiryDate(goodsArrivalDetailID) {
        require(["kpopupWindow"], function (kpopupWindow) {
            var voidDetailWindow = new kpopupWindow();
            voidDetailWindow.openWindow($("#popupWindow"), "@Url.Action("ChangeExpiryDate", Model.ControllerName)" + "/" + $("#GoodsArrivalID").val() + "/" + goodsArrivalDetailID, "Gia hạn sử dụng", @Settings.PopupWidthSmall, @Settings.PopupHeightSmall);
        });
    }

    $(document.body).keydown(function (e) {if (e.keyCode === 45) {cloneSelectedItem();}});
    function tailorClonedItem(clonedItem) { clonedItem.GoodsArrivalDetailID = 0; clonedItem.Quantity = 0; }


    window.urlCommoditiesApi = '@Url.Action("GetCommodityImport", "CommodityAPIs", new { area = "Commons" })';
</script>
