@using TotalPortal.Configuration

@model TotalPortal.Areas.Purchases.ViewModels.LabViewModel

<div id="popupWindow"></div>

<div>
    @(Html.Kendo().Grid<TotalModel.Models.LabIndex>()
            .Name("kendoGridIndex")
            .Columns(columns =>
            {
                columns.Bound(p => p.LabID).DisplayNameTitle().Hidden();
                columns.Bound(p => p.EntryMonth).Title("Tháng").Hidden();
                columns.Bound(p => p.EntryDate).Title("Ngày").Format("{0:dd/MM/yy}").Width(50).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" });

                columns.Bound(p => p.GoodsArrivalReference).Title("PNH").Width(10).HtmlAttributes(new { @class = "index-nav-column" }).ClientTemplate("<a href='" + Url.RouteUrl("Default", new { controller = "Purchases/" + "#=ArrivalControllers#", action = "Edit" }) + "/#= GoodsArrivalID #'>#=GoodsArrivalReference#</a>");

                columns.Bound(p => p.Code).Title("Lab code").Width(96);
                columns.Bound(p => p.CommodityCodes).Title("Mã hàng").Width(190);

                columns.Bound(p => p.SealCodes).Title("Số cont").Width(108);
                columns.Bound(p => p.BatchCodes).Title("Số lô").Width(168);

                columns.Bound(p => p.TotalQuantity).Title("KL").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(60).ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });

                columns.Template(t => { }).Title("Lab chưa pass").ClientTemplate("<input class='IsSelected' #= Approved ? '':checked='checked' #  type='checkbox' disabled='disabled'/>").HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(3);
                columns.Template(t => { }).Title("Hold").ClientTemplate("<input class='IsSelected' #= !Hold ? '':checked='checked' #  type='checkbox' disabled='disabled'/>").HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(3);
                columns.Template(t => { }).Title("Quarantine").ClientTemplate("<input class='IsSelected' #= !InActive ? '':checked='checked' #  type='checkbox' disabled='disabled'/>").HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(3);

                columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(88)
                    .ClientTemplate("<a class='k-button' style='padding-left:0px; padding-right:0px' href='" + Url.RouteUrl("Default", new { controller = "Purchases/Labs", action = "Approve" }) + "/#= LabID #'><span class='k-icon sbt-tick'></span></a>  <a class='k-button' style='padding-left:0px; padding-right:0px' href='" + Url.RouteUrl("Default", new { controller = "Purchases/Labs", action = "Hold" }) + "/#= LabID #'><span class='k-icon sbt-hold'></span></a>  <a class='k-button' style='padding-left:0px; padding-right:0px' href='" + Url.RouteUrl("Default", new { controller = "Purchases/Labs", action = "Void" }) + "/#= LabID #'><span class='k-icon sbt-void'></span></a>");
            })
            .ToolBar(toolbar =>
            {
                toolbar.Template(@<text>
                    <div class="toolbar" style="float: right;">
                        <label>Nhập số phiếu nhập hàng, lab code, số cont, số lô, mã hoặc tên hàng</label>
                        <input id="indexFilterText" class="k-textbox" style="text-align: center; " onkeyup="indexFilterText_KeyUp()" />
                    </div>
                </text>);
            })
                    .Filterable(f => f.Enabled(false))
                    .Pageable()
                    .Groupable(g => g.Messages(messages => messages.Empty("Phân nhóm dữ liệu: Kéo và thả tiêu đề một hoặc nhiều cột dữ liệu ngay bên dưới vào đây để phân nhóm hiển thị theo phân cấp của các cột dữ liệu")))
                    .Selectable()
                    .Sortable()
                    .Events(e =>
                    {
                        e.DataBound("hightLightSelectedRow");
                    })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Group(group => group.AddDescending(p => p.EntryDate))
                        .Read(read => read.Action("GetLabIndexes", "LabAPIs", new { area = "Purchases" }))
                        .Sort(sort =>
                            {
                                sort.Add(p => p.EntryDate).Descending();
                                sort.Add(p => p.LabID).Descending();
                            })
                        .PageSize(20)
                        .Model(model =>
                        {
                            model.Id(x => x.LabID);
                            model.Field(m => m.LabID).DefaultValue(0);
                        })
                        .ServerOperation(true)
                        .Aggregates(a => a.Add(x => x.TotalQuantity).Sum())
                        )
                    .HtmlAttributes(new { @class = "grid-class" }))
</div>



<script type="text/javascript">
    function hightLightSelectedRow(e) {
        require(["kindexGrid"], function (kindexGrid) {
            var kindexGridInstance = new kindexGrid("kendoGridIndex");
            kindexGridInstance.setSelectedRow("LabID", '@ViewBag.SelectedEntityID');
        });
    }

    function createWizard() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("CreateWizard", "Labs")", "Chọn khách hàng, chương trình khuyến mãi áp dụng cho khách hàng", "@Settings.PopupWidth", "@Settings.PopupHeightWithTab");
        });
    }


    decoratingKindex = function (idx, elem) {

        var isWarrantyClaim = elem.InActive;
        if (isWarrantyClaim != null && isWarrantyClaim == true) {
            $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus");
        }

        isWarrantyClaim = elem.InActivePartial;
        if (isWarrantyClaim != null && isWarrantyClaim == true) {
            $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus1");
        }
    }






    function indexFilterText_KeyUp() {
        var indexFilterText = $("#indexFilterText").val(), gridDetails = $("#kendoGridIndex").data("kendoGrid");

        if ((indexFilterText && indexFilterText.length >= "@Settings.AutoCompleteMinLenght") || $("#ShowPendingOnly").val() != "0") {
            gridDetails.dataSource.filter({
                logic: "or",
                filters: [
                    { field: "GoodsArrivalReference", operator: "contains", value: indexFilterText },
                    { field: "Code", operator: "contains", value: indexFilterText },
                    { field: "CommodityCodes", operator: "contains", value: indexFilterText },
                    { field: "CommodityNames", operator: "contains", value: indexFilterText },

                    { field: "SealCodes", operator: "contains", value: indexFilterText },
                    { field: "BatchCodes", operator: "contains", value: indexFilterText },

                    { field: "ApprovedStatus", operator: "contains", value: indexFilterText }
                ]
            });


        } else {
            if (gridDetails.dataSource.filter() != undefined)
                gridDetails.dataSource.filter({});
        }
    }

</script>



