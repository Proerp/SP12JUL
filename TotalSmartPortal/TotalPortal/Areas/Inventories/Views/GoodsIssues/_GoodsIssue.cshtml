@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Inventories.ViewModels.GoodsIssueViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopA.cshtml")

    @Html.HiddenFor(model => model.GoodsIssueID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")

        @Html.EditorFor(d => d.Code, new { SOCodeReadonly = true })

        <div class="form-group">
            @Html.EditorFor(d => d.Storekeeper, new { EmployeeDisplayName = @Model.GetDisplayName(m => m.Storekeeper) })
        </div>

        @Html.HiddenFor(model => model.TradePromotionID)
        @if (@Model.TradePromotionID != null)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.TradePromotionSpecs)
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => model.TradePromotionSpecs).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.DeliveryDate)
            <div class="div-input">
                @Html.Kendo().DatePickerFor(model => model.DeliveryDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "text-danger" })
            </div>
        </div>


    </div>

    <div class="right-panel">
        <div class="right-top-panel right-top-panel-H1">

            @Html.EditorFor(d => d.Customer, new { CustomerDescriptionHidden = "true", CustomerDisplayName = @Model.GetDisplayName(m => m.Customer) })
            @Html.EditorFor(d => d.Receiver, new { CustomerDescriptionHidden = "false", CustomerDisplayName = @Model.GetDisplayName(m => m.Receiver), CustomerIcon = "Customer Red 24.png" })

            @Html.EditorFor(d => d.ShippingAddress, new { ShippingAddressReadonly = true })
            @Html.EditorFor(d => d.Addressee, new { AddresseeReadonly = true })

            <div style="float: right; margin-top: -199px; " title="Phiếu đề nghị giao hàng">
                @Html.DisplayFor(d => d.DeliveryAdvice)
            </div>

            <div style="display:none;"> @Html.DisplayFor(d => d.Warehouse, "Commons/WarehouseBase") </div>
        </div>


        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.GoodsIssueViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.GoodsIssueDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= GoodsIssueDetailID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GoodsIssueDetailID' value='#= GoodsIssueDetailID #' />");
                    columns.Bound(p => p.GoodsIssueID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= GoodsIssueID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GoodsIssueID' value='#= GoodsIssueID #' />");
                    columns.Bound(p => p.DeliveryAdviceID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= DeliveryAdviceID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].DeliveryAdviceID' value='#= DeliveryAdviceID #' />");
                    columns.Bound(p => p.DeliveryAdviceDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= DeliveryAdviceDetailID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].DeliveryAdviceDetailID' value='#= DeliveryAdviceDetailID #' />");


                    columns.Bound(p => p.DeliveryAdviceReference).DisplayNameTitle().Width(60).Hidden(@Model.DeliveryAdvice != null && @Model.DeliveryAdvice.DeliveryAdviceID != null ? true : false)
                        .ClientTemplate("#= DeliveryAdviceReference #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].DeliveryAdviceReference' value='#= DeliveryAdviceReference #' />");

                    columns.Bound(p => p.DeliveryAdviceCode).DisplayNameTitle().Width(90).Hidden(@Model.DeliveryAdvice != null && @Model.DeliveryAdvice.DeliveryAdviceID != null ? true : false)
                        .ClientTemplate("#= (DeliveryAdviceCode == null)? '' : DeliveryAdviceCode #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].DeliveryAdviceCode' value='#= (DeliveryAdviceCode == null) ? '' : DeliveryAdviceCode #' />");

                    columns.Bound(p => p.EntryDate).DisplayNameTitle().Width(80).Hidden(@Model.DeliveryAdvice != null && @Model.DeliveryAdvice.DeliveryAdviceID != null ? true : false)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= kendo.format('{0:" + @Settings.DateFormat + "}', EntryDate) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].EntryDate' value='#= kendo.format('{0:" + @Settings.DateFormat + "}', EntryDate) #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(90).Hidden()
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().HtmlAttributes(new { @class = "index-nav-column" }).Width(160)
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)")
                        .ClientTemplate("<a title='Chọn lô hàng xuất kho' href='http://localhost:49200' onclick='GetPendingDeliveryAdviceDetails(#= DeliveryAdviceDetailID #);return false;'>#=CommodityCode#</a>" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");


                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");
                    columns.Bound(p => p.VATbyRow).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= VATbyRow #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].VATbyRow' value='#= VATbyRow #' />");


                    columns.Bound(p => p.WarehouseID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= WarehouseID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].WarehouseID' value='#= WarehouseID #' />");
                    columns.Bound(p => p.WarehouseCode).DisplayNameTitle().Width(50)
                        .ClientTemplate("#= WarehouseCode #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].WarehouseCode' value='#= WarehouseCode #' />");


                    columns.Bound(p => p.CalculatingTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CalculatingTypeID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].CalculatingTypeID' value='#= CalculatingTypeID #' />");

                    columns.Bound(p => p.QuantityAvailable).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50)
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityAvailable) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].QuantityAvailable' value='#= QuantityAvailable #' />");

                    columns.Bound(p => p.ControlFreeQuantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', ControlFreeQuantity) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].ControlFreeQuantity' value='#= ControlFreeQuantity #' />");

                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");
                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50).EditorTemplateName(GlobalEnums.SKUWarehouse? "Quantity" : "QuantityReadonly")
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.FreeQuantityRemains).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', FreeQuantityRemains) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].FreeQuantityRemains' value='#= FreeQuantityRemains #' />");
                    columns.Bound(p => p.FreeQuantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50).EditorTemplateName(GlobalEnums.SKUWarehouse ? "Quantity" : "QuantityReadonly")
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', FreeQuantity) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].FreeQuantity' value='#= FreeQuantity #' />");


                    columns.Bound(p => p.VoidTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (VoidTypeID == null) ? '' : VoidTypeID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].VoidTypeID' value='#= (VoidTypeID == null) ? '' : VoidTypeID #' />");
                    columns.Bound(p => p.VoidTypeCode).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (VoidTypeCode == null) ? '' : VoidTypeCode #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].VoidTypeCode' value='#= (VoidTypeCode == null) ? '' : VoidTypeCode #' />");
                    columns.Bound(p => p.VoidTypeName).DisplayNameTitle().Width(200).HtmlAttributes(new { @class = "isBonus" })
                        .ClientTemplate("#= (VoidTypeName == null) ? '' : VoidTypeName #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].VoidTypeName' value='#= (VoidTypeName == null) ? '' : VoidTypeName #' />");
                    columns.Bound(p => p.VoidClassID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (VoidClassID == null) ? '' : VoidClassID #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].VoidClassID' value='#= (VoidClassID == null) ? '' : VoidClassID #' />");

                    columns.Bound(p => p.ListedPrice).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmAmount)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmAmount + "', ListedPrice) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].ListedPrice' value='#= ListedPrice #' />");

                    columns.Bound(p => p.DiscountPercent).DisplayNameTitle().Hidden().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmDiscountPercent)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmDiscountPercent + "', average) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmDiscountPercent + "', DiscountPercent) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].DiscountPercent' value='#= DiscountPercent #' />");

                    columns.Bound(p => p.UnitPrice).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmAmount)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmAmount + "', UnitPrice) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].UnitPrice' value='#= UnitPrice #' />");

                    columns.Bound(p => p.TradeDiscountRate).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50).Hidden()
                        .Format(Settings.kfmDiscountPercent)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmDiscountPercent + "', TradeDiscountRate) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].TradeDiscountRate' value='#= TradeDiscountRate #' />");

                    columns.Bound(p => p.ListedAmount).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(130).Hidden(@Model.VATbyRow || @Model.ShowDiscount ? true : false)
                        .Format(Settings.kfmAmount)
                        .ClientFooterTemplate(@Model.VATbyRow ? "#= kendo.format('" + Settings.kfmAmount + "', sum) #" : "<div>CK <span>#= kendo.format('" + Settings.kfmDiscountPercent + "', data.TradeDiscountRate.max) #</span>: #= kendo.format('" + Settings.kfmAmount + "', DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TT: #= kendo.format('" + Settings.kfmAmount + "', DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ")) #</div><div>VAT <span>#= data.VATPercent.max #</span>%: #= kendo.format('" + Settings.kfmAmount + "', DoRound(DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TC: #= kendo.format('" + Settings.kfmAmount + "', DoRound(DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") - (-DoRound(DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")), " + GlobalEnums.rndAmount + ")) #</div>")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmAmount + "', ListedAmount) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].ListedAmount' value='#= ListedAmount #' />");

                    columns.Bound(p => p.Amount).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(130).Hidden(@Model.VATbyRow || !@Model.ShowDiscount ? true : false)
                        .Format(Settings.kfmAmount)
                        .ClientFooterTemplate(@Model.VATbyRow ? "#= kendo.format('" + Settings.kfmAmount + "', sum) #" : "<div>CK <span>#= kendo.format('" + Settings.kfmDiscountPercent + "', data.TradeDiscountRate.max) #</span>: #= kendo.format('" + Settings.kfmAmount + "', DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TT: #= kendo.format('" + Settings.kfmAmount + "', DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ")) #</div><div>VAT <span>#= data.VATPercent.max #</span>%: #= kendo.format('" + Settings.kfmAmount + "', DoRound(DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TC: #= kendo.format('" + Settings.kfmAmount + "', DoRound(DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") - (-DoRound(DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")), " + GlobalEnums.rndAmount + ")) #</div>")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmAmount + "', Amount) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].Amount' value='#= Amount #' />");

                    columns.Bound(p => p.VATPercent).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}%', VATPercent) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].VATPercent' value='#= VATPercent #' />");

                    columns.Bound(p => p.ListedVATAmount).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmAmount)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmAmount + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmAmount + "', ListedVATAmount) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].ListedVATAmount' value='#= ListedVATAmount #' />");

                    columns.Bound(p => p.VATAmount).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmAmount)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmAmount + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmAmount + "', VATAmount) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].VATAmount' value='#= VATAmount #' />");

                    columns.Bound(p => p.ListedGrossPrice).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmAmount)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmAmount + "', ListedGrossPrice) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].ListedGrossPrice' value='#= ListedGrossPrice #' />");
                    columns.Bound(p => p.GrossPrice).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmAmount)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmAmount + "', GrossPrice) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GrossPrice' value='#= GrossPrice #' />");


                    columns.Bound(p => p.ListedGrossAmount).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(90).Hidden(!@Model.VATbyRow || @Model.ShowDiscount ? true : false)
                        .Format(Settings.kfmAmount)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmAmount + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmAmount + "', ListedGrossAmount) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].ListedGrossAmount' value='#= ListedGrossAmount #' />");
                    columns.Bound(p => p.GrossAmount).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(90).Hidden(!@Model.VATbyRow || !@Model.ShowDiscount ? true : false)
                        .Format(Settings.kfmAmount)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmAmount + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmAmount + "', GrossAmount) #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].GrossAmount' value='#= GrossAmount #' />");

                    columns.Bound(p => p.Remarks).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                    columns.Bound(p => p.IsBonus).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (IsBonus == null)? '' : IsBonus #" + "<input type='hidden' name='GoodsIssueViewDetails[#= index(data) #].IsBonus' value='#= (IsBonus == null) ? '' : IsBonus #' />");

                    //columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });
                })
                .Filterable(f => f.Enabled(false))
                .Navigatable()

                .ToolBar(toolbar =>
                {
                    if (Model.Editable && GlobalEnums.SKUWarehouse)
                    {
                        toolbar.Template(@<text>
                            <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Xuất tất cả theo đề nghị giao hàng </button>
                        </text>);
                    }
                    else
                    {
                        toolbar.Template(@<text> @Commons.Toolbars.BlankToolbar() </text>);
                    }
                })

                .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                .Selectable(settings =>
                {
                    settings.Mode(GridSelectionMode.Multiple);
                    settings.Type(GridSelectionType.Row);
                })

                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.GoodsIssueDetailID);
                        model.Field(m => m.GoodsIssueDetailID).DefaultValue(0);
                        model.Field(m => m.GoodsIssueID).DefaultValue(@Model.GoodsIssueID);
                        model.Field(m => m.VATbyRow).DefaultValue(@Model.VATbyRow);
                    })
                    .Events(events =>
                    {
                        events.Error("kendGrid_ErrorHandler");
                    })
                    .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                    .Aggregates(a => a.Add(x => x.TradeDiscountRate).Max())
                    .Aggregates(a => a.Add(x => x.VATPercent).Max())
                    .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.Quantity).Sum())
                    .Aggregates(a => a.Add(x => x.FreeQuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.FreeQuantity).Sum())
                    .Aggregates(a => a.Add(x => x.DiscountPercent).Average())
                    .Aggregates(a => a.Add(x => x.ListedAmount).Sum())
                    .Aggregates(a => a.Add(x => x.Amount).Sum())
                    .Aggregates(a => a.Add(x => x.ListedVATAmount).Sum())
                    .Aggregates(a => a.Add(x => x.VATAmount).Sum())
                    .Aggregates(a => a.Add(x => x.ListedGrossAmount).Sum())
                    .Aggregates(a => a.Add(x => x.GrossAmount).Sum())
                )
            )
        </div>
        
        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>

                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PaymentTerm.cshtml")


                                @*<div class="form-group">
                                        @Html.LabelFor(model => model.Remarks, new { @class = "right-panel-label" })
                                        <div class="div-input">
                                            @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                        </div>
                                        <div class="div-validation-message">
                                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>*@
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>

        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Save" formaction="@Url.Action("Edit", "GoodsIssues")" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu PXK </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "GoodsIssues")" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/Print-Gray-32.png" /> Lưu và in phiếu xuất kho</button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "GoodsIssues")" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/Ok-icon-1.png" /> Hoàn tất xuất kho </button>
            }
            else
            {
                if (Model.Approved && !Model.Approvable && !Model.UnApprovable)
                {
                    <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", "GoodsIssues", new {id = @Model.GoodsIssueID })'"> <img src="~/Content/Images/Mains/cloud-32-NoCheck.png" /> Hủy duyệt phiếu xuất kho </button>
                }
            }

            @if (Model.GoodsIssueID > 0)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", "GoodsIssues", new { id = @Model.GoodsIssueID })'"> <img src="~/Content/Images/New/printer-cashier-32.png" /> In phiếu xuất kho </button>
            }

        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")


        @if (!GlobalEnums.SKUWarehouse)
        {
            <div style="height:68px;"></div>
            <div style="clear:both;"></div>            
            <div class="div-k-panel">
                @(Html.Kendo().PanelBar()
                .Name("GoodsIssueViewPackagePanelBar")
                    .Items(items =>
                    {
                        items.Add()
                            .Text("Chi tiết xuất kho")
                            .Selected(true)
                            .Expanded(true)
                            .Content(@<text>
                                @divGoodsIssueViewPackages()
                            </text>).HtmlAttributes(new { @class = "panel-class" });
                    })
                )
            </div>            
        }
        
    </div>




@helper divGoodsIssueViewPackages()
{
    @(Html.Kendo().Grid(Model.GoodsIssueViewPackages)
        .Name("kendoGridViewPackages")
        .Columns(columns =>
        {
            columns.Bound(p => p.GoodsIssuePackageID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= GoodsIssuePackageID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].GoodsIssuePackageID' value='#= GoodsIssuePackageID #' />");
            columns.Bound(p => p.GoodsIssueID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= GoodsIssueID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].GoodsIssueID' value='#= GoodsIssueID #' />");


            columns.Bound(p => p.DeliveryAdviceID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= (DeliveryAdviceID == null)? '' : DeliveryAdviceID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].DeliveryAdviceID' value='#= (DeliveryAdviceID == null) ? '' : DeliveryAdviceID #' />");            
            columns.Bound(p => p.DeliveryAdviceDetailID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= (DeliveryAdviceDetailID == null)? '' : DeliveryAdviceDetailID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].DeliveryAdviceDetailID' value='#= (DeliveryAdviceDetailID == null) ? '' : DeliveryAdviceDetailID #' />");


            columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].CommodityID' value='#= CommodityID #' />");
            columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(118)
                .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].CommodityCode' value='#= CommodityCode #' />");
            columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(268).HtmlAttributes(new { style = "" })
                .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].CommodityName' value='#= CommodityName #' />")
                .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");

            columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");


            columns.Bound(p => p.GoodsReceiptID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= (GoodsReceiptID == null)? '' : GoodsReceiptID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].GoodsReceiptID' value='#= (GoodsReceiptID == null) ? '' : GoodsReceiptID #' />");
            columns.Bound(p => p.GoodsReceiptDetailID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= (GoodsReceiptDetailID == null)? '' : GoodsReceiptDetailID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].GoodsReceiptDetailID' value='#= (GoodsReceiptDetailID == null) ? '' : GoodsReceiptDetailID #' />");

            columns.Bound(p => p.GoodsReceiptCode).DisplayNameTitle().Width(60).Hidden()
                .ClientTemplate("#= (GoodsReceiptCode == null)? '' : GoodsReceiptCode #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].GoodsReceiptCode' value='#= (GoodsReceiptCode == null) ? '' : GoodsReceiptCode #' />");
            columns.Bound(p => p.GoodsReceiptReference).DisplayNameTitle().Width(60).Hidden()
                .ClientTemplate("#= (GoodsReceiptReference == null)? '' : GoodsReceiptReference #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].GoodsReceiptReference' value='#= (GoodsReceiptReference == null) ? '' : GoodsReceiptReference #' />");
            columns.Bound(p => p.GoodsReceiptEntryDate).DisplayNameTitle().Width(80)
                .Format("{0:" + @Settings.DateFormat + "}")
                .ClientTemplate("#= (GoodsReceiptEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsReceiptEntryDate) #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].GoodsReceiptEntryDate' value='#= (GoodsReceiptEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsReceiptEntryDate) #' />");

            columns.Bound(p => p.WarehouseID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= (WarehouseID == null)? '' : WarehouseID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].WarehouseID' value='#= (WarehouseID == null) ? '' : WarehouseID #' />");            
            
            columns.Bound(p => p.BinLocationID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= BinLocationID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].BinLocationID' value='#= BinLocationID #' />");
            columns.Bound(p => p.BinLocationCode).DisplayNameTitle().Width(68).Hidden()
                .ClientTemplate("#= (BinLocationCode == null)? '' : BinLocationCode #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].BinLocationCode' value='#= (BinLocationCode == null) ? '' : BinLocationCode #' />");

            columns.Bound(p => p.BatchID).DisplayNameTitle().Hidden()
                .ClientTemplate("#= BatchID #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].BatchID' value='#= BatchID #' />");
            columns.Bound(p => p.BatchCode).DisplayNameTitle().Width(60)
                .ClientTemplate("#= (BatchCode == null)? '' : BatchCode #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].BatchCode' value='#= (BatchCode == null) ? '' : BatchCode #' />");
            columns.Bound(p => p.BatchEntryDate).DisplayNameTitle().Width(80)
                .Format("{0:" + @Settings.DateFormat + "}")
                .ClientTemplate("#= (BatchEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', BatchEntryDate) #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].BatchEntryDate' value='#= (BatchEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', BatchEntryDate) #' />");

            columns.Bound(p => p.SealCode).DisplayNameTitle().Width(20).Hidden()
                .ClientTemplate("#= (SealCode == null)? '' : SealCode #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].SealCode' value='#= (SealCode == null) ? '' : SealCode #' />");
            columns.Bound(p => p.LabCode).DisplayNameTitle().Width(30).Hidden(!GlobalEnums.CBPP)
                .ClientTemplate("#= (LabCode == null)? '' : LabCode #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].LabCode' value='#= (LabCode == null) ? '' : LabCode #' />");
            columns.Bound(p => p.Barcode).DisplayNameTitle().Width(68).Hidden(!GlobalEnums.CBPP)
                .ClientTemplate("#= (Barcode == null)? '' : Barcode #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].Barcode' value='#= (Barcode == null) ? '' : Barcode #' />");

            columns.Bound(p => p.ExpiryDate).DisplayNameTitle().Width(60).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Hidden(!GlobalEnums.CBPP)
                .Format("{0:" + @Settings.DateFormat + "}")
                .ClientTemplate("#= (ExpiryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', ExpiryDate) #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].ExpiryDate' value='#= (ExpiryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', ExpiryDate) #' />");

            columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                .Format(Settings.kfmQuantity)
                .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].QuantityRemains' value='#= QuantityRemains #' />");

            columns.Bound(p => p.QuantityAvailables).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                .Format(Settings.kfmQuantity)
                .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityAvailables) #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].QuantityAvailables' value='#= QuantityAvailables #' />");

            columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50)
                .Format(Settings.kfmQuantity)
                .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].Quantity' value='#= Quantity #' />");


            columns.Bound(p => p.Remarks).DisplayNameTitle().Hidden()
                .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='GoodsIssueViewPackages[#= newIndex(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

            columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(10).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });
        })
            .Filterable(f => f.Enabled(false))
            .Navigatable()

            .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
            .Selectable(settings =>
            {
                settings.Mode(GridSelectionMode.Multiple);
                settings.Type(GridSelectionType.Row);
            })
            .Events(events =>
            {
                events.DataBound(@<text>
                    function(e) {

                    var grid = $("#kendoGridViewPackages").data("kendoGrid");
                    var data = grid.dataSource.data();
                    $.each(data, function (i, row) {
                    var isWarrantyClaim = row.VoidTypeName;
                    if (isWarrantyClaim != null && isWarrantyClaim != '') {
                    $('tr[data-uid="' + row.uid + '"]').addClass("isBonus");
                    }
                    });
                    }
                </text>);
            }).DataSource(dataSource => dataSource
            .Ajax()
            .Batch(true)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(x => x.GoodsIssuePackageID);
                model.Field(m => m.GoodsIssuePackageID).DefaultValue(0);
                model.Field(m => m.GoodsIssueID).DefaultValue(@Model.GoodsIssueID);
            })
            .Events(events =>
            {
                events.Change("dataSourcePackageChange");
                events.Error("kendGrid_ErrorHandler");
            })
            .Aggregates(a => a.Add(x => x.CommodityName).Count())
            .Aggregates(a => a.Add(x => x.QuantityAvailables).Sum())
            .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
            .Aggregates(a => a.Add(x => x.Quantity).Sum())
        )
    )
}
}

<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    function GetPendingDeliveryAdviceDetails(deliveryAdviceDetailID) {
        if ($("#kendoGridViewPackages").data("kendoGrid") != undefined && requireConfig.pageOptions.Editable) {
            require(["kpopupWindow"], function (kpopupWindow) {
                var createWizardWindow = new kpopupWindow();
                createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingDeliveryAdviceDetails", "GoodsIssues", new { area = "Inventories" })" + "/" + deliveryAdviceDetailID, "Xuất kho", "@Settings.PopupWidthMedium", "@Settings.PopupHeightWithTab");
            });
        }
    }

    dataSourcePackageChange = function (e) {
        if (e.items[0] != undefined && e.items[0].DeliveryAdviceDetailID != undefined && e.items[0].DeliveryAdviceDetailID > 0) {
            updateQuantities(e.items[0].DeliveryAdviceDetailID);
            $("#kendoGridViewPackages").data("kendoGrid").refresh(); //To refresh footerTemplate
        }
    }

    function updateQuantities(deliveryAdviceDetailID) {
        //1-GET THE TOTAL Quantity OF deliveryAdviceDetailID
        var quantity = 0; var totalQuantity = 0;
        var kenPackages = $("#kendoGridViewPackages").data("kendoGrid");
        var allPackages = kenPackages.dataSource.data();
        for (var i = 0; i < allPackages.length; i++) {
            var dataPackage = allPackages[i];
            if (dataPackage.DeliveryAdviceDetailID == deliveryAdviceDetailID) totalQuantity = DoRound(totalQuantity + dataPackage.Quantity, requireConfig.websiteOptions.rndQuantity);
        }


        //2-APPLY THE TOTAL Quantity TO kendoGridDetails dataItem OF THE deliveryAdviceDetailID
        var kenGrid = $("#kendoGridDetails").data("kendoGrid");
        var allDataRows = kenGrid.dataSource.data();
        for (var i = 0; i < allDataRows.length; i++) {
            var dataItem = allDataRows[i];
            if (dataItem.DeliveryAdviceDetailID == deliveryAdviceDetailID) {
                if (dataItem.ControlFreeQuantity === 0)
                    quantity = totalQuantity;
                else {
                    var quantity1 = DoRound(totalQuantity - (dataItem.ControlFreeQuantity === 0 ? 0 : Math.floor(totalQuantity / dataItem.ControlFreeQuantity)), requireConfig.websiteOptions.rndQuantity); //FIRST: TRY TO GET Quantity1
                    var trialTotalQuantity = 0; var freeQuantity = DoRound((dataItem.ControlFreeQuantity === 0 ? 0 : Math.floor(quantity1 / dataItem.ControlFreeQuantity)), requireConfig.websiteOptions.rndQuantity); //SECOND: FROM Quantity1 => TO GET FIRST freeQuantity
                    do {
                        trialTotalQuantity = DoRound(freeQuantity + freeQuantity * dataItem.ControlFreeQuantity, requireConfig.websiteOptions.rndQuantity); //THIRST: GET trialTotalQuantity
                        if (DoRound(totalQuantity - trialTotalQuantity, requireConfig.websiteOptions.rndQuantity) >= dataItem.ControlFreeQuantity) freeQuantity = freeQuantity + 1; else break; //FINALLY: CHECK UNTIL BREAK
                    }
                    while (true);
                    quantity = DoRound(totalQuantity - freeQuantity, requireConfig.websiteOptions.rndQuantity);
                }

                dataItem.set("Quantity", quantity); break;
            }
        }
    }

    function newIndex(dataItem) {
        var data = $("#kendoGridViewPackages").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }
</script>
