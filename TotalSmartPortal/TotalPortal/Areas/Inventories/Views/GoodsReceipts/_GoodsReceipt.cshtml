@using TotalBase.Enums;
@using TotalPortal.Configuration

@using TotalDTO;
@using TotalModel
@using TotalDTO.Inventories
@using TotalPortal.Areas.Inventories.ViewModels

@model IGoodsReceiptViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.Hidden("WarehouseTaskID", (int)@ViewBag.WarehouseTaskID);
    @Html.Hidden("WarehouseTaskIDList", (string)@ViewBag.WarehouseTaskIDList);

    @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).OneStep)
    
    @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsReceiptID)
    @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsReceiptTypeID)

    @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).BinLocation_WarehouseID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")


        @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionID)
        @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionCode)
        @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionReference)


        @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalID)
        @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalCode)
        @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalReference)


        @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).WarehouseTransferID)
        @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).WarehouseTransferReference)


        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Shift.cshtml")

        <div @{if (!GlobalEnums.CBPP) { <text> class="SBT-Hidden" </text>   }}>
            <div class="form-group">
                @Html.LabelFor(model => (model as IGoodsReceiptDTO).UserLastName)
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptDTO).UserLastName).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => (model as IGoodsReceiptDTO).UserFirstName)
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptDTO).UserFirstName).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
            </div>
        </div>

        <div class="SBT-Hidden">
            @switch (Model.GoodsReceiptTypeID)
            {
                case (int)GlobalEnums.GoodsReceiptTypeID.PurchaseRequisition:
                    <div class="form-group">
                        @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionReferenceNote)
                        <div class="div-input">
                            @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionReferenceNote).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                        </div>
                        <div class="div-validation-message">
                            @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionReferenceNote, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionCodeNote)
                        <div class="div-input">
                            @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionCodeNote).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                        </div>
                        <div class="div-validation-message">
                            @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionCodeNote, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    if (Model.PurchaseRequisitionEntryDate != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionEntryDate)
                            <div class="div-input">
                                @Html.Kendo().DateTimePickerFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                            </div>
                            <div class="div-validation-message">
                                @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).PurchaseRequisitionEntryDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    break;



                case (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival:
                    <div class="form-group">
                        @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalReferenceNote)
                        <div class="div-input">
                            @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalReferenceNote).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                        </div>
                        <div class="div-validation-message">
                            @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalReferenceNote, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalCodeNote)
                        <div class="div-input">
                            @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalCodeNote).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                        </div>
                        <div class="div-validation-message">
                            @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalCodeNote, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    if (Model.GoodsArrivalEntryDate != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalEntryDate)
                            <div class="div-input">
                                @Html.Kendo().DateTimePickerFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                            </div>
                            <div class="div-validation-message">
                                @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).GoodsArrivalEntryDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    break;



                case (int)GlobalEnums.GoodsReceiptTypeID.WarehouseTransfer:
                    <div class="form-group">
                        @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).WarehouseTransferReferenceNote)
                        <div class="div-input">
                            @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptPrimitiveDTO).WarehouseTransferReferenceNote).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                        </div>
                        <div class="div-validation-message">
                            @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).WarehouseTransferReferenceNote, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    if (Model.WarehouseTransferEntryDate != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).WarehouseTransferEntryDate)
                            <div class="div-input">
                                @Html.Kendo().DateTimePickerFor(model => (model as IGoodsReceiptPrimitiveDTO).WarehouseTransferEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                            </div>
                            <div class="div-validation-message">
                                @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).WarehouseTransferEntryDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    <div class="SBT-Hidden">
                        @Html.EditorFor(model => (model as IGoodsReceiptDTO).WarehouseIssue, new { WarehouseDisplayName = @Model.WarehouseIssue.GetDisplayName(m => m.WarehouseID), LeftPanelInput = "left-panel-input" })
                    </div>
                    break;

                case (int)GlobalEnums.GoodsReceiptTypeID.FinishedProduct:
                    @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).PlannedOrderID)
                    <div class="form-group">
                        @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).PlannedOrderReference)
                        <div class="div-input">
                            @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptPrimitiveDTO).PlannedOrderReference).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                        </div>
                        <div class="div-validation-message">
                            @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).PlannedOrderReference, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).PlannedOrderCode)
                        <div class="div-input">
                            @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptPrimitiveDTO).PlannedOrderCode).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                        </div>
                        <div class="div-validation-message">
                            @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).PlannedOrderCode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    if (Model.PlannedOrderEntryDate != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).PlannedOrderEntryDate)
                            <div class="div-input">
                                @Html.Kendo().DateTimePickerFor(model => (model as IGoodsReceiptPrimitiveDTO).PlannedOrderEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                            </div>
                            <div class="div-validation-message">
                                @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).PlannedOrderEntryDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    break;

                case (int)GlobalEnums.GoodsReceiptTypeID.Recyclate:
                    @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).RecyclateID)
                    <div class="form-group">
                        @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).RecyclateReference)
                        <div class="div-input">
                            @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptPrimitiveDTO).RecyclateReference).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                        </div>
                        <div class="div-validation-message">
                            @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).RecyclateReference, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    if (Model.RecyclateEntryDate != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).RecyclateEntryDate)
                            <div class="div-input">
                                @Html.Kendo().DateTimePickerFor(model => (model as IGoodsReceiptPrimitiveDTO).RecyclateEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                            </div>
                            <div class="div-validation-message">
                                @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).RecyclateEntryDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    break;
                
                default:
                    <div class="form-group">
                        @Html.LabelFor(model => (model as IGoodsReceiptPrimitiveDTO).Code)
                        <div class="div-input">
                            @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptPrimitiveDTO).Code).HtmlAttributes(new { @class = "left-panel-input" })
                        </div>
                        <div class="div-validation-message">
                            @Html.ValidationMessageFor(model => (model as IGoodsReceiptPrimitiveDTO).Code, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    break;
            }

            @Html.HiddenFor(model => (model as IGoodsReceiptPrimitiveDTO).Purposes)
        </div>

    </div>
    
    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H3">
            @if (Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.WarehouseTransfer || Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.MaterialIssue)
            {
                @Html.EditorFor(model => (model as IGoodsReceiptDTO).Customer, new { CustomerDescriptionHidden = "true", CustomerTelephoneHidden = "true", CustomerDisplayName = @Model.Customer.GetDisplayName(m => m.CustomerID), CustomerIcon = "Customer Red 24.png", NullCustomer = (Model.CustomerID > 0 ? null : (Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.WarehouseTransfer ? "Nhập VCNB từ " + @Model.WarehouseIssue.Code : "Thu hồi màng đã cấp")), CustomerInfo = (Model.CustomerID > 0 ? null : "#") })
            }
            else
            {
                @Html.EditorFor(model => (model as IGoodsReceiptDTO).Customer, new { CustomerDescriptionHidden = "true", CustomerTelephoneHidden = "true", CustomerDisplayName = @Model.Customer.GetDisplayName(m => m.CustomerID), NullCustomer = (Model.CustomerID > 0 ? null : (Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival ? (Model.Purposes != null ? Model.Purposes: "Nhập kho chung nhiều đơn hàng") : (Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.Recyclate ? "Thu hồi phế phẩm" : ""))), CustomerInfo = (Model.CustomerID > 0 ? null : "#") })
            }

            @Html.Partial("~/Views/Helpers/Commons/_Warehouse2019.cshtml")

            <div class="form-group">
                <div class="right-panel-label right-panel-label-whole-width">
                    @if (Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival && Model.GoodsArrivalID != null)
                    {
                        <a style="color: #428bca; " href="@Url.Action("Edit", @Model.ArrivalController, new { area = "Purchases", id = Model.GoodsArrivalID })" target="_blank"> Phiếu nhận hàng </a> }
                    else
                    {@Html.LabelFor(model => (model as IGoodsReceiptDTO).Features)}                    
                </div>
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => (model as IGoodsReceiptDTO).Features).HtmlAttributes(new { @class = "right-panel-input right-panel-input-whole-width" })
                </div>
            </div>
        </div>

        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.ViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.GoodsReceiptDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= GoodsReceiptDetailID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].GoodsReceiptDetailID' value='#= GoodsReceiptDetailID #' />");
                    columns.Bound(p => p.GoodsReceiptID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= GoodsReceiptID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].GoodsReceiptID' value='#= GoodsReceiptID #' />");

                    columns.Bound(p => p.PurchaseRequisitionID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (PurchaseRequisitionID == null)? '' : PurchaseRequisitionID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].PurchaseRequisitionID' value='#= (PurchaseRequisitionID == null) ? '' : PurchaseRequisitionID #' />");
                    columns.Bound(p => p.PurchaseRequisitionDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (PurchaseRequisitionDetailID == null)? '' : PurchaseRequisitionDetailID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].PurchaseRequisitionDetailID' value='#= (PurchaseRequisitionDetailID == null) ? '' : PurchaseRequisitionDetailID #' />");

                    columns.Bound(p => p.PurchaseRequisitionCode).DisplayNameTitle().Width(60).Hidden()
                        .ClientTemplate("#= (PurchaseRequisitionCode == null)? '' : PurchaseRequisitionCode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].PurchaseRequisitionCode' value='#= (PurchaseRequisitionCode == null) ? '' : PurchaseRequisitionCode #' />");
                    columns.Bound(p => p.PurchaseRequisitionReference).DisplayNameTitle().Width(60).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.PurchaseRequisition && @Model.PurchaseRequisitionID == null ? false : true)
                        .ClientTemplate("#= (PurchaseRequisitionReference == null)? '' : PurchaseRequisitionReference #" + "<input type='hidden' name='ViewDetails[#= index(data) #].PurchaseRequisitionReference' value='#= (PurchaseRequisitionReference == null) ? '' : PurchaseRequisitionReference #' />");
                    columns.Bound(p => p.PurchaseRequisitionEntryDate).DisplayNameTitle().Width(80).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.PurchaseRequisition && @Model.PurchaseRequisitionID == null ? false : true)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (PurchaseRequisitionEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', PurchaseRequisitionEntryDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].PurchaseRequisitionEntryDate' value='#= (PurchaseRequisitionEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', PurchaseRequisitionEntryDate) #' />");




                    columns.Bound(p => p.GoodsArrivalID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (GoodsArrivalID == null)? '' : GoodsArrivalID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].GoodsArrivalID' value='#= (GoodsArrivalID == null) ? '' : GoodsArrivalID #' />");
                    columns.Bound(p => p.GoodsArrivalDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (GoodsArrivalDetailID == null)? '' : GoodsArrivalDetailID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].GoodsArrivalDetailID' value='#= (GoodsArrivalDetailID == null) ? '' : GoodsArrivalDetailID #' />");
                    columns.Bound(p => p.GoodsArrivalPackageID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (GoodsArrivalPackageID == null)? '' : GoodsArrivalPackageID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].GoodsArrivalPackageID' value='#= (GoodsArrivalPackageID == null) ? '' : GoodsArrivalPackageID #' />");

                    columns.Bound(p => p.PurchaseOrderCodes).DisplayNameTitle().Width(60).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival && @Model.GoodsArrivalID == null ? false : true)
                        .ClientTemplate("#= (PurchaseOrderCodes == null)? '' : PurchaseOrderCodes #" + "<input type='hidden' name='ViewDetails[#= index(data) #].PurchaseOrderCodes' value='#= (PurchaseOrderCodes == null) ? '' : PurchaseOrderCodes #' />");
                    columns.Bound(p => p.CustomerCode).DisplayNameTitle().Width(60).Hidden()
                        .ClientTemplate("#= (CustomerCode == null)? '' : CustomerCode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].CustomerCode' value='#= (CustomerCode == null) ? '' : CustomerCode #' />");
                    
                    columns.Bound(p => p.GoodsArrivalCode).DisplayNameTitle().Width(60).Hidden()
                        .ClientTemplate("#= (GoodsArrivalCode == null)? '' : GoodsArrivalCode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].GoodsArrivalCode' value='#= (GoodsArrivalCode == null) ? '' : GoodsArrivalCode #' />");
                    columns.Bound(p => p.GoodsArrivalReference).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "index-nav-column" }).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival && @Model.GoodsArrivalID == null ? false : true)
                        .ClientTemplate("<a href='" + Url.RouteUrl("Default", new { controller = "Purchases/" + Model.ArrivalController, action = "Edit" }) + "/#= GoodsArrivalID #' target='_blank'>#=GoodsArrivalReference#</a>" + "<input type='hidden' name='ViewDetails[#= index(data) #].GoodsArrivalReference' value='#= (GoodsArrivalReference == null) ? '' : GoodsArrivalReference #' />");
                    columns.Bound(p => p.GoodsArrivalEntryDate).DisplayNameTitle().Width(80).Hidden()
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (GoodsArrivalEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsArrivalEntryDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].GoodsArrivalEntryDate' value='#= (GoodsArrivalEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsArrivalEntryDate) #' />");

                    
                    
                    
                    columns.Bound(p => p.WarehouseTransferID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (WarehouseTransferID == null)? '' : WarehouseTransferID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].WarehouseTransferID' value='#= (WarehouseTransferID == null) ? '' : WarehouseTransferID #' />");
                    columns.Bound(p => p.WarehouseTransferDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (WarehouseTransferDetailID == null)? '' : WarehouseTransferDetailID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].WarehouseTransferDetailID' value='#= (WarehouseTransferDetailID == null) ? '' : WarehouseTransferDetailID #' />");

                    columns.Bound(p => p.WarehouseTransferReference).DisplayNameTitle().Width(30).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.WarehouseTransfer && @Model.WarehouseTransferID == null ? false : true)
                        .ClientTemplate("#= (WarehouseTransferReference == null)? '' : WarehouseTransferReference #" + "<input type='hidden' name='ViewDetails[#= index(data) #].WarehouseTransferReference' value='#= (WarehouseTransferReference == null) ? '' : WarehouseTransferReference #' />");
                    columns.Bound(p => p.WarehouseTransferEntryDate).DisplayNameTitle().Width(80).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.WarehouseTransfer && @Model.WarehouseTransferID == null ? false : true)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (WarehouseTransferEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', WarehouseTransferEntryDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].WarehouseTransferEntryDate' value='#= (WarehouseTransferEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', WarehouseTransferEntryDate) #' />");
                    columns.Bound(p => p.GoodsReceiptReference).DisplayNameTitle().Width(30).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.WarehouseTransfer ? false : true)
                        .ClientTemplate("#= (GoodsReceiptReference == null)? '' : GoodsReceiptReference #" + "<input type='hidden' name='ViewDetails[#= index(data) #].GoodsReceiptReference' value='#= (GoodsReceiptReference == null) ? '' : GoodsReceiptReference #' />");
                    columns.Bound(p => p.GoodsReceiptEntryDate).DisplayNameTitle().Width(38).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.WarehouseTransfer ? false : true)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (GoodsReceiptEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsReceiptEntryDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].GoodsReceiptEntryDate' value='#= (GoodsReceiptEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsReceiptEntryDate) #' />");


                    columns.Bound(p => p.FinishedItemID).DisplayNameTitle().Hidden()
                       .ClientTemplate("#= (FinishedItemID == null)? '' : FinishedItemID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].FinishedItemID' value='#= (FinishedItemID == null) ? '' : FinishedItemID #' />");
                    columns.Bound(p => p.FinishedItemPackageID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (FinishedItemPackageID == null)? '' : FinishedItemPackageID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].FinishedItemPackageID' value='#= (FinishedItemPackageID == null) ? '' : FinishedItemPackageID #' />");

                    columns.Bound(p => p.FinishedProductID).DisplayNameTitle().Hidden()
                       .ClientTemplate("#= (FinishedProductID == null)? '' : FinishedProductID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].FinishedProductID' value='#= (FinishedProductID == null) ? '' : FinishedProductID #' />");
                    columns.Bound(p => p.FinishedProductPackageID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (FinishedProductPackageID == null)? '' : FinishedProductPackageID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].FinishedProductPackageID' value='#= (FinishedProductPackageID == null) ? '' : FinishedProductPackageID #' />");

                    columns.Bound(p => p.RecyclateID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (RecyclateID == null)? '' : RecyclateID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].RecyclateID' value='#= (RecyclateID == null) ? '' : RecyclateID #' />");
                    columns.Bound(p => p.RecyclatePackageID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (RecyclatePackageID == null)? '' : RecyclatePackageID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].RecyclatePackageID' value='#= (RecyclatePackageID == null) ? '' : RecyclatePackageID #' />");

                    
                    columns.Bound(p => p.FirmOrderReference).DisplayNameTitle().Width(30).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.FinishedProduct || Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.MaterialIssue ? false : true)
                        .ClientTemplate("#= (FirmOrderReference == null)? '' : FirmOrderReference #" + "<input type='hidden' name='ViewDetails[#= index(data) #].FirmOrderReference' value='#= (FirmOrderReference == null) ? '' : FirmOrderReference #' />");
                    columns.Bound(p => p.FirmOrderCode).DisplayNameTitle().Width(30).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.FinishedProduct || Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.MaterialIssue ? false : true)
                        .ClientTemplate("#= (FirmOrderCode == null)? '' : FirmOrderCode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].FirmOrderCode' value='#= (FirmOrderCode == null) ? '' : FirmOrderCode #' />");

                    columns.Bound(p => p.FirmOrderSpecs).DisplayNameTitle().Width(96).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.MaterialIssue ? false : true)
                        .ClientTemplate("#= (FirmOrderSpecs == null)? '' : FirmOrderSpecs #" + "<input type='hidden' name='ViewDetails[#= index(data) #].FirmOrderSpecs' value='#= (FirmOrderSpecs == null) ? '' : FirmOrderSpecs #' />");

                    columns.Bound(p => p.SemifinishedItemReferences).DisplayNameTitle().Width(88).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.FinishedItem ? false : true)
                        .ClientTemplate("#= (SemifinishedItemReferences == null)? '' : SemifinishedItemReferences #" + "<input type='hidden' name='ViewDetails[#= index(data) #].SemifinishedItemReferences' value='#= (SemifinishedItemReferences == null) ? '' : SemifinishedItemReferences #' />");
                    columns.Bound(p => p.FinishedItemEntryDate).DisplayNameTitle().Width(60).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.FinishedItem ? false : true)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (FinishedItemEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', FinishedItemEntryDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].FinishedItemEntryDate' value='#= (FinishedItemEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', FinishedItemEntryDate) #' />");
                    
                    columns.Bound(p => p.SemifinishedProductReferences).DisplayNameTitle().Width(30).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.FinishedProduct ? false : true)
                        .ClientTemplate("#= (SemifinishedProductReferences == null)? '' : SemifinishedProductReferences #" + "<input type='hidden' name='ViewDetails[#= index(data) #].SemifinishedProductReferences' value='#= (SemifinishedProductReferences == null) ? '' : SemifinishedProductReferences #' />");
                    columns.Bound(p => p.FinishedProductEntryDate).DisplayNameTitle().Width(80).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.FinishedProduct ? false : true)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (FinishedProductEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', FinishedProductEntryDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].FinishedProductEntryDate' value='#= (FinishedProductEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', FinishedProductEntryDate) #' />");


                    columns.Bound(p => p.RecyclateEntryDate).DisplayNameTitle().Width(80).Hidden()
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (RecyclateEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', RecyclateEntryDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].RecyclateEntryDate' value='#= (RecyclateEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', RecyclateEntryDate) #' />");
                    
                    
                    columns.Bound(p => p.MaterialIssueID).DisplayNameTitle().Hidden()
                    .ClientTemplate("#= (MaterialIssueID == null)? '' : MaterialIssueID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].MaterialIssueID' value='#= (MaterialIssueID == null) ? '' : MaterialIssueID #' />");
                    columns.Bound(p => p.MaterialIssueDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (MaterialIssueDetailID == null)? '' : MaterialIssueDetailID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].MaterialIssueDetailID' value='#= (MaterialIssueDetailID == null) ? '' : MaterialIssueDetailID #' />");
                    columns.Bound(p => p.MaterialIssueEntryDate).DisplayNameTitle().Width(108).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.MaterialIssue ? false : true)
                        .Format("{0:" + @Settings.DateTimeFormat + "}")
                        .ClientTemplate("#= (MaterialIssueEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateTimeFormat + "}', MaterialIssueEntryDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].MaterialIssueEntryDate' value='#= (MaterialIssueEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateTimeFormat + "}', MaterialIssueEntryDate) #' />");

                    columns.Bound(p => p.WorkshiftName).DisplayNameTitle().Width(68).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.MaterialIssue ? false : true)
                       .ClientTemplate("#= (WorkshiftName == null)? '' : WorkshiftName #" + "<input type='hidden' name='ViewDetails[#= index(data) #].WorkshiftName' value='#= (WorkshiftName == null) ? '' : WorkshiftName #' />");
                    columns.Bound(p => p.ProductionLinesCode).DisplayNameTitle().Width(20).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.MaterialIssue ? false : true)
                        .ClientTemplate("#= (ProductionLinesCode == null)? '' : ProductionLinesCode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].ProductionLinesCode' value='#= (ProductionLinesCode == null) ? '' : ProductionLinesCode #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(160).EditorTemplateName(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.PurchaseRequisition || Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival || Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.WarehouseTransfer || Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.MaterialIssue || Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.FinishedItem || Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.FinishedProduct || Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.Recyclate ? "StringReadonly" : "AutoCompletes/CommodityAvailable")                        
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");

                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(208).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.MaterialIssue || (Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival && @Model.GoodsArrivalID == null) ? true : false)
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='ViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                    columns.Bound(p => p.LabID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= LabID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].LabID' value='#= LabID #' />");

                    columns.Bound(p => p.BatchID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= BatchID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].BatchID' value='#= BatchID #' />");                    
                    columns.Bound(p => p.BatchEntryDate).DisplayNameTitle().Width(38).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.WarehouseTransfer ? false : true)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (BatchEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', BatchEntryDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].BatchEntryDate' value='#= (BatchEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', BatchEntryDate) #' />");
                    columns.Bound(p => p.BatchCode).DisplayNameTitle().Width(30).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival ? false : true)
                        .ClientTemplate("#= (BatchCode == null)? '' : BatchCode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].BatchCode' value='#= (BatchCode == null) ? '' : BatchCode #' />");
                    columns.Bound(p => p.LabCode).DisplayNameTitle().Width(30).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival ? false : true)
                        .ClientTemplate("#= (LabCode == null)? '' : LabCode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].LabCode' value='#= (LabCode == null) ? '' : LabCode #' />");

                    columns.Bound(p => p.Barcode).DisplayNameTitle().Width(68).Hidden(GlobalEnums.CBPP && Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival ? false : true)
                        .ClientTemplate("#= (Barcode == null)? '' : Barcode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].Barcode' value='#= (Barcode == null) ? '' : Barcode #' />");
                    columns.Bound(p => p.SealCode).DisplayNameTitle().Width(30).Hidden(true)
                        .ClientTemplate("#= (SealCode == null)? '' : SealCode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].SealCode' value='#= (SealCode == null) ? '' : SealCode #' />");

                    columns.Bound(p => p.ProductionDate).DisplayNameTitle().Width(38).Hidden(true)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (ProductionDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', ProductionDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].ProductionDate' value='#= (ProductionDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', ProductionDate) #' />");

                    columns.Bound(p => p.ExpiryDate).DisplayNameTitle().Width(38).Hidden(Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival ? false : true).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" })
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (ExpiryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', ExpiryDate) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].ExpiryDate' value='#= (ExpiryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', ExpiryDate) #' />");

                    columns.Bound(p => p.BinLocationID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= BinLocationID #" + "<input type='hidden' name='ViewDetails[#= index(data) #].BinLocationID' value='#= BinLocationID #' />");
                    columns.Bound(p => p.BinLocationCode).DisplayNameTitle().Width(80).Hidden(!GlobalEnums.CBPP).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" })
                        .ClientTemplate("#= (BinLocationCode == null)? '' : BinLocationCode #" + "<input type='hidden' name='ViewDetails[#= index(data) #].BinLocationCode' value='#= (BinLocationCode == null) ? '' : BinLocationCode #' />");

                    columns.Bound(p => p.UnitWeight).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', UnitWeight) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].UnitWeight' value='#= UnitWeight #' />");
                    columns.Bound(p => p.TareWeight).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', TareWeight) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].TareWeight' value='#= TareWeight #' />");
                    
                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(GlobalEnums.CBPP ? true : false)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");
                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='ViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");



                    columns.Bound(p => p.Remarks).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='ViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");


                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(10).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });
                })
                    .Filterable(f => f.Enabled(false))
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            //toolbar.Create().HtmlAttributes(new { @class = "fa fa-map-marker" }).Text("Add new aa le ea1");
                            switch (Model.GoodsReceiptTypeID)
                            {
                                case (int)GlobalEnums.GoodsReceiptTypeID.PurchaseRequisition:
                                    toolbar.Template(@<text>
                                        <button type="button" class="k-button" onclick="GetPendingPurchaseRequisitionDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng </button>
                                        <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Nhập kho toàn bộ </button>
                                    </text>);
                                    break;

                                case (int)GlobalEnums.GoodsReceiptTypeID.GoodsArrival:
                                    toolbar.Template(@<text>
                                        <button type="button" class="k-button" onclick="GetPendingGoodsArrivalPackages()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng </button>
                                    </text>);
                                    break;

                                case (int)GlobalEnums.GoodsReceiptTypeID.WarehouseTransfer:
                                    toolbar.Template(@<text>
                                        <button type="button" class="k-button" onclick="GetPendingWarehouseTransferDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng </button>
                                        <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Nhập kho toàn bộ </button>
                                    </text>);
                                    break;

                                case (int)GlobalEnums.GoodsReceiptTypeID.MaterialIssue:
                                    toolbar.Template(@<text>
                                        <button type="button" class="k-button" onclick="GetPendingMaterialIssueDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng </button>
                                        <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Nhập kho toàn bộ </button>
                                    </text>);
                                    break;
                                case (int)GlobalEnums.GoodsReceiptTypeID.FinishedItem:
                                    toolbar.Template(@<text>
                                        <button type="button" class="k-button" onclick="GetPendingPlannedItemDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng </button>
                                        <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Nhập kho toàn bộ </button>
                                    </text>);
                                    break;
                                case (int)GlobalEnums.GoodsReceiptTypeID.FinishedProduct:
                                    toolbar.Template(@<text>
                                        <button type="button" class="k-button" onclick="GetPendingPlannedOrderDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng </button>
                                        <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Nhập kho toàn bộ </button>
                                    </text>);
                                    break;
                                case (int)GlobalEnums.GoodsReceiptTypeID.Recyclate:
                                    toolbar.Template(@<text>
                                        <button type="button" class="k-button" onclick="GetPendingRecyclateDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng </button>
                                        <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Nhập kho toàn bộ </button>
                                    </text>);
                                    break;
                                default:
                                    toolbar.Template(@<text>
                                        <button type="button" class="k-button" onclick="$('#kendoGridDetails').data('kendoGrid').addRow()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Thêm mặt hàng </button>
                                    </text>);
                                    break;
                            }

                        }
                        else
                        {
                            toolbar.Template(@<text> @Commons.Toolbars.BlankToolbar() </text>);
                        }
                    })

                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.GoodsReceiptDetailID);
                        model.Field(m => m.GoodsReceiptDetailID).DefaultValue(0);
                        model.Field(m => m.GoodsReceiptID).DefaultValue(@Model.GoodsReceiptID);
                    })
                    .Events(events =>
                    {
                        events.Error("kendGrid_ErrorHandler");
                    })
                    .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                    .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.Quantity).Sum())
                )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseDTO).Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseDTO).Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseDTO).Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseModel).Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseModel).Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseModel).Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>


        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/Save-Verify-32.png" /> Lưu và duyệt</button>
            }

            @if (Model.GoodsReceiptID > 0 && !Model.Approvable && !Model.UnApprovable)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", Model.ControllerName, new {id = @Model.GoodsReceiptID })'"> <img src="~/Content/Images/Mains/@(!@Model.Approved ? "Check-32-CHY.png" : "cloud-32-NoCheck.png")" /> @(!Model.Approved ? "Duyệt PNK" : "Hủy duyệt PNK") </button>
            }
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")

    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    function GetPendingPurchaseRequisitionDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingPurchaseRequisitionDetails", Model.ControllerName, new { area = "Inventories" })", "Chọn mặt hàng ", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }



    function GetPendingGoodsArrivalPackages() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingGoodsArrivalPackages", Model.ControllerName, new { area = "Inventories" })", "Chọn mặt hàng ", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }



    function GetPendingWarehouseTransferDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingWarehouseTransferDetails", Model.ControllerName, new { area = "Inventories" })", "Chọn mặt hàng ", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }



    function GetPendingMaterialIssueDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingMaterialIssueDetails", Model.ControllerName, new { area = "Inventories" })", "Chọn mặt hàng ", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }

    function GetPendingPlannedItemDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingPlannedItemDetails", Model.ControllerName, new { area = "Inventories" })", "Chọn mặt hàng ", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }

    function GetPendingPlannedOrderDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingPlannedOrderDetails", Model.ControllerName, new { area = "Inventories" })", "Chọn mặt hàng ", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }

    function GetPendingRecyclateDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingRecyclateDetails", Model.ControllerName, new { area = "Inventories" })", "Chọn mặt hàng ", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }
</script>
