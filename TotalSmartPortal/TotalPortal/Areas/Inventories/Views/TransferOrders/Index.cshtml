@using TotalDTO;
@using TotalBase.Enums
@using TotalPortal.Configuration

@model TotalPortal.Areas.Inventories.ViewModels.ITransferOrderViewModel

<div id="popupWindow"></div>

<div>
    @(Html.Kendo().Grid<TotalModel.Models.TransferOrderIndex>()
            .Name("kendoGridIndex")
            .Columns(columns =>
            {
                columns.Bound(p => p.TransferOrderID).DisplayNameTitle().Hidden();                
                columns.Bound(p => p.EntryDate).Title("Ngày").Format("{0:dd/MM/yy}").Hidden();

                columns.Bound(p => p.Reference).Title("Phiếu").Width(1).HtmlAttributes(new { @class = "index-nav-column" }).ClientTemplate("<a href='" + Url.RouteUrl("Default", new { controller = "Inventories/" + Model.ControllerName, action = "Edit" }) + "/#= TransferOrderID #'>#=Reference#</a>");

                columns.Bound(p => p.WarehouseCode).Title("KX").Width(10);
                columns.Bound(p => p.WarehouseReceiptCode).Title("KN").Width(10);
                columns.Bound(p => p.CommodityCode).Title("Mặt hàng").Width(GlobalEnums.CBPP? 50 : 168);

                columns.Bound(p => p.QuantityAvailables).Title("Tồn kho").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(20);

                columns.Bound(p => p.Quantity).Title("KL Y/C").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(10).ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });
                columns.Bound(p => p.QuantityIssued).Title("Đã C/K").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(10).ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });
                columns.Bound(p => p.QuantityRemains).Title("Còn lại").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(10).ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });

                columns.Bound(p => p.Weight).Title("TL Net").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(10).Hidden(!GlobalEnums.CBPP);
                columns.Bound(p => p.Packages).Title("Số kiện").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(10).ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" }).Hidden(!GlobalEnums.CBPP);

                columns.Bound(p => p.Description).Title("Ghi chú").Width(196);
                columns.Bound(p => p.VoidTypeName).Title("Hủy lệnh").Width(20);
                
                columns.Template(t => { }).Title("!").ClientTemplate("<input class='IsSelected' #= Approved ? '':checked='checked' #  type='checkbox' disabled='disabled'/>").HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(3);
                
                columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(52)
                    .ClientTemplate("<a class='k-button' title='Hủy phiếu' style='padding-left:0px; padding-right:0px' href='" + Url.RouteUrl("Default", new { controller = "Inventories/" + Model.ControllerName, action = "Void" }) + "/#= TransferOrderID #'><span class='k-icon sbt-void'></span></a> <a class='k-button' style='padding-left:0px; padding-right:0px' href='" + Url.RouteUrl("Default", new { controller = "Inventories/" + Model.ControllerName, action = "Delete" }) + "/#= TransferOrderID #'><span class='k-icon sbt-delete'></span></a>");
            })
            .ToolBar(toolbar =>
            {
                toolbar.Template(@<text>
                    <button type="button" class="k-button" onclick="createWizard()"> <img src="~/Content/Images/Mains/Size24/folder-documents-icon-24.png" /> Lập phiếu mới </button>
                    <button type="button" title="Cập nhật số liệu chuyển kho" class="k-button" onclick="indexFilterText_KeyUp(true)"> <img src="~/Content/Images/New/Refresh-icon.png" /> </button>
                    
                    <div class="toolbar" style="float: right;">
                        <label>Lọc dữ liệu</label>
                        <input id="indexFilterText" class="k-textbox" style="text-align: center; width: 108px; " onkeyup="indexFilterText_KeyUp()" />

                        <span id="filterExtended">
                            @(Html.Kendo().DropDownList()
                                .Name("ShowFilterOptionID")
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .HtmlAttributes(new { @style = "width: 188px; text-align: center; " })
                                .BindTo(new List<SelectListItem>()
                                    {
                                        new SelectListItem { Text = "Đang theo dõi", Value = "10"},
                                        new SelectListItem { Text = "Đang theo dõi [Chưa CK]", Value = "11"},
                                        new SelectListItem { Text = "Đang theo dõi [Đang CK]", Value = "12"},
                                        new SelectListItem { Text = "Đã hoàn tất [Từ ... Đến]", Value = "20"},
                                        new SelectListItem { Text = "Tất cả [Từ ... Đến]", Value = "0"}
                                    })
                                .Events(e => e.Change("indexFilterText_KeyUp"))
                            )

                            @(Html.Kendo().DropDownList()
                                .Name("ShowLabOptionID")
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .HtmlAttributes(new { @style = "width: 118px; text-align: center; " })
                                .BindTo(new List<SelectListItem>()
                                    {
                                        new SelectListItem { Text = "Đã kiểm định", Value = "1"},
                                        new SelectListItem { Text = "BG chưa QC", Value = "0"}
                                    })
                                .Events(e => e.Change("indexFilterText_KeyUp"))
                            )

                            @Html.Kendo().DatePickerFor(m => (m as IBaseDTO).GlobalFromDate).Events(e => e.Change("indexFilterText_KeyUp")).HtmlAttributes(new { @class = "input-class", type = "text", style = "text-align: center; width:118px" })
                            @Html.Kendo().DatePickerFor(m => (m as IBaseDTO).GlobalToDate).Events(e => e.Change("indexFilterText_KeyUp")).HtmlAttributes(new { @class = "input-class", type = "text", style = "text-align: center; width:118px" })

                            @*@(Html.Kendo().DropDownList()
                                .Name("ShowApproved")
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .HtmlAttributes(new { @style = "width: 45px; text-align: center; " })
                                .BindTo(new List<SelectListItem>()
                                    {
                                        new SelectListItem { Text = "A", Value = "0"},
                                        new SelectListItem { Text = "!", Value = "-1"}
                                    })
                                .Events(e => e.Change("indexFilterText_KeyUp"))
                            )*@
                        </span>
                       
                    </div>
                </text>);
            })
            .Filterable(f => f.Enabled(false))            
            .Pageable()
            .Groupable(g => g.Messages(messages => messages.Empty("Phân nhóm dữ liệu: Kéo và thả tiêu đề một hoặc nhiều cột dữ liệu ngay bên dưới vào đây để phân nhóm hiển thị theo phân cấp của các cột dữ liệu")))                        
            .Selectable()
            .Sortable()
            .Events(e =>
            {
                e.DataBound("hightLightSelectedRow");
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Group(group => group.AddDescending(p => p.EntryDate))
                .Read(read => read.Action("GetTransferOrderIndexes", "TransferOrderAPIs", new { area = "Inventories" }).Data("onTransferOrderIndexes"))
                .Sort(sort =>
                    {
                        sort.Add(p => p.EntryDate).Descending();
                        sort.Add(p => p.TransferOrderID).Descending();
                    })
                .PageSize(20)
                .Model(model =>
                {
                    model.Id(x => x.TransferOrderID);
                    model.Field(m => m.TransferOrderID).DefaultValue(0);
                })
                .ServerOperation(true)
                .Aggregates(a => a.Add(x => x.Quantity).Sum())
                .Aggregates(a => a.Add(x => x.QuantityIssued).Sum())
                .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                .Aggregates(a => a.Add(x => x.Packages).Sum())
                )
            .HtmlAttributes(new { @class = "grid-class" }))
</div>



<script type="text/javascript">
    function onTransferOrderIndexes(e) {
        return {
            withExtendedSearch: true,
            nmvnTaskID: requireConfig.pageOptions.NmvnTaskID,
            extendedFromDate: $("#GlobalFromDate").val(),
            extendedToDate: $("#GlobalToDate").val(),
            labOptionID: $("#ShowLabOptionID").val(),
            filterOptionID: $("#ShowFilterOptionID").val()
        };
    }

    function hightLightSelectedRow(e) {
        require(["kindexGrid"], function (kindexGrid) {
            var kindexGridInstance = new kindexGrid("kendoGridIndex");
            kindexGridInstance.setSelectedRow("TransferOrderID", '@ViewBag.SelectedEntityID');
        });
    }

    function createWizard() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("CreateWizard", Model.ControllerName)", "Chọn kho, lập phiếu mới", "@Settings.PopupWidth", "@Settings.PopupHeight");
        });
    }


    decoratingKindex = function (idx, elem) {

        if (elem.Approved == null || elem.Approved == false) {
            $('tr[data-uid="' + elem.uid + '"]').addClass("NotApproved");
        }
        else {
            if (elem.InActive != null && elem.InActive == true) {
                $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus");
            }

            if (elem.InActivePartial != null && elem.InActivePartial == true) {
                $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus1");
            }
        }

    }






    function indexFilterText_KeyUp(readDataSource) {
        var indexFilterText = $("#indexFilterText").val(), gridDetails = $("#kendoGridIndex").data("kendoGrid");

        if (readDataSource == true || (indexFilterText === "" || indexFilterText.length >= "@Settings.AutoCompleteMinLenght03") || $("#LastLabOptionID").val() != $("#ShowLabOptionID").val() || $("#LastFilterOptionID").val() != $("#ShowFilterOptionID").val()) {
            $("#LastLabOptionID").val($("#ShowLabOptionID").val());
            $("#LastFilterOptionID").val($("#ShowFilterOptionID").val());
            gridDetails.dataSource.filter({
                logic: "or",
                filters: [
                    { field: "Reference", operator: "contains", value: indexFilterText },
                    { field: "WarehouseCode", operator: "contains", value: indexFilterText },
                    { field: "WarehouseReceiptCode", operator: "contains", value: indexFilterText },
                    { field: "CommodityCode", operator: "contains", value: indexFilterText },
                    { field: "CommodityName", operator: "contains", value: indexFilterText }
                ]
            });


        } else {
            if (indexFilterText && indexFilterText.length && gridDetails.dataSource.filter() != undefined)
                gridDetails.dataSource.filter({});
        }
    }

</script>



