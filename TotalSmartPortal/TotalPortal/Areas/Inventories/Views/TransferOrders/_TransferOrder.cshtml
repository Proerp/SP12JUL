@using TotalBase.Enums;
@using TotalPortal.Configuration

@using TotalDTO;
@using TotalModel
@using TotalDTO.Inventories
@using TotalPortal.Areas.Inventories.ViewModels

@model ITransferOrderViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.HiddenFor(model => (model as ITransferOrderPrimitiveDTO).TransferOrderID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml", @Model, new ViewDataDictionary { { "EntryDateReadonly", false } })

        <div class="SBT-Hidden">
            @Html.EditorFor(d => (d as ITransferOrderDTO).Warehouse, new { WarehouseDisplayName = @Model.Warehouse.GetDisplayName(m => m.WarehouseID), LeftPanelInput = "left-panel-input" })
        </div>

        <div class="SBT-Hidden">
            @Html.EditorFor(d => (d as ITransferOrderDTO).WarehouseReceipt, new { WarehouseDisplayName = @Model.WarehouseReceipt.GetDisplayName(m => m.WarehouseID), LeftPanelInput = "left-panel-input" })
        </div>


        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/TransferOrderType.cshtml")

        @if (@Model.Voidable || @Model.UnVoidable || @Model.VoidTypeID > 0)
        { //Don't render when in Edit Mode, so: do not add VoidType.VoidTypeID [Required] DataAnnotations to the view to submit to controller when edit
            <div class="form-group">
                @Html.EditorFor(d => (d as ITransferOrderDTO).VoidType, (@Model.Voidable ? new { VoidTypeClassSpecialEditable = "SpecialEditable" } : null))
            </div>
        }
    </div>

    <div class="right-panel">
        <div class="right-top-panel right-top-panel-H3">
            <div class="right-first-panel">
                <div class="form-group">
                    <div class="right-panel-label">@Html.Label("Lệnh VCNB")</div>
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => (model as ITransferOrderDTO).Features).HtmlAttributes(new { @class = "right-panel-input", @readonly = "readonly" })
                    </div>
                    <div class="div-validation-message">
                        @Html.ValidationMessageFor(model => (model as ITransferOrderDTO).Features, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="right-second-panel">
                <div class="form-group">
                    <div style="float:left; padding-top: 4px; padding-right: 2px;">
                        <img src="~/Content/Images/Mains/Size24/WH-24B.png" title="Kho xuất" />
                    </div>
                    <div class="right-panel-label right-panel-label-20percent" }> <span> Xuất: @Model.Warehouse.Code </span> </div>
                    <div style="float:left; padding-top: 4px; padding-right: 2px;">
                        <img src="~/Content/Images/Mains/Size24/WH-24G.png" title="Kho nhập" />
                    </div>
                    <div class="right-panel-label right-panel-label-20percent"> <span> Nhập: @Model.WarehouseReceipt.Code </span> </div>
                </div>
            </div>

            <div class="form-group">
                <div class="right-panel-label right-panel-label-whole-width">
                    @Html.LabelFor(model => (model as ITransferOrderPrimitiveDTO).TransferOrderJobs)
                </div>
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => (model as ITransferOrderPrimitiveDTO).TransferOrderJobs).HtmlAttributes(new { @class = "right-panel-input right-panel-input-whole-width" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => (model as ITransferOrderPrimitiveDTO).TransferOrderJobs, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.TransferOrderViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.TransferOrderDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= TransferOrderDetailID #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].TransferOrderDetailID' value='#= TransferOrderDetailID #' />");
                    columns.Bound(p => p.TransferOrderID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= TransferOrderID #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].TransferOrderID' value='#= TransferOrderID #' />");

                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(GlobalEnums.CBPP? 108: 196)                        
                        .ClientTemplate("<div> #= CommodityCode #</div>" +
                            "<div> #= (VoidTypeName == null)? '' : VoidTypeName #</div>" +
                            "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");

                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(GlobalEnums.CBPP ? 260 : 160).HtmlAttributes(new { style = "" })
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");
                        
                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");


                    columns.Bound(p => p.QuantityAvailables).DisplayNameTitle().Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                         .Format(Settings.kfmQuantity)
                         .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                         .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityAvailables) #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].QuantityAvailables' value='#= QuantityAvailables #' />");

                    columns.Bound(p => p.QuantityAvailableReceipts).DisplayNameTitle().Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                         .Format(Settings.kfmQuantity)
                         .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                         .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityAvailableReceipts) #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].QuantityAvailableReceipts' value='#= QuantityAvailableReceipts #' />");
                    
                    columns.Bound(p => p.Quantity).DisplayNameTitle().Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.QuantityIssued).DisplayNameTitle().Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityIssued) #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].QuantityIssued' value='#= QuantityIssued #' />");

                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");

                    columns.Bound(p => p.Weight).DisplayNameTitle().Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(!GlobalEnums.CBPP)
                        .Format(Settings.kfmN0)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', Weight) #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].Weight' value='#= Weight #' />");

                    columns.Bound(p => p.Packages).DisplayNameTitle().Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(!GlobalEnums.CBPP)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Packages) #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].Packages' value='#= Packages #' />");
                    
                    columns.Bound(p => p.Remarks).DisplayNameTitle().Width(330)
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                    columns.Bound(p => p.InActivePartial).DisplayNameTitle().Hidden()
                       .ClientTemplate("#= (InActivePartial == null)? '' : InActivePartial #" + "<input type='hidden' name='TransferOrderViewDetails[#= index(data) #].InActivePartial' value='#= (InActivePartial == null) ? '' : InActivePartial #' />");

                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(10).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });

                    columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(50).Hidden(!@Model.Voidable && !@Model.UnVoidable)
                        .ClientTemplate("<a class='k-button' style='padding-left:0px; padding-right:0px' onclick='callVoidDetail(#= TransferOrderDetailID #)'><span class='k-icon sbt-void'></span></a>");
                })
                .Filterable(f => f.Enabled(false))
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            toolbar.Template(@<text> @MakeToolbar() </text>);
                        }
                        else
                        {
                            toolbar.Template(@<text> @Commons.Toolbars.BlankToolbar() </text>);
                        }
                    })

                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .Events(events =>
                    {
                        events.DataBound(@<text>
                            function(e) {

                            var grid = $("#kendoGridDetails").data("kendoGrid");
                            var data = grid.dataSource.data();
                            $.each(data, function (i, row) {
                            var isWarrantyClaim = row.VoidTypeName;
                            if (isWarrantyClaim != null && isWarrantyClaim != '') {
                            $('tr[data-uid="' + row.uid + '"]').addClass("isBonus");
                            }
                            });
                            }
                        </text>);

                    }).DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.TransferOrderDetailID);
                        model.Field(m => m.TransferOrderDetailID).DefaultValue(0);
                        model.Field(m => m.TransferOrderID).DefaultValue(@Model.TransferOrderID);
                    })
                    .Events(events =>
                    {
                        events.Change("dataSourceChange");
                        events.Error("kendGrid_ErrorHandler");
                    })
                    .Aggregates(a => a.Add(x => x.CommodityName).Count())
                    .Aggregates(a => a.Add(x => x.QuantityAvailables).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityAvailableReceipts).Sum())
                    .Aggregates(a => a.Add(x => x.Quantity).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityIssued).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.Packages).Sum())
                )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseDTO).Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseDTO).Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseDTO).Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseModel).Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseModel).Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseModel).Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>


        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/Save-Verify-32.png" /> Lưu và duyệt</button>
            }
            else
            {
                if (!Model.Voidable && !Model.UnVoidable)
                {
                    <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", Model.ControllerName, new { id = @Model.TransferOrderID })'"> <img src="~/Content/Images/New/printer-cashier-32.png" /> In PXK </button>
                }
            }

            @if (Model.TransferOrderID > 0 && !Model.Approvable && !Model.UnApprovable)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", Model.ControllerName, new {id = @Model.TransferOrderID })'"> <img src="~/Content/Images/Mains/@(!@Model.Approved ? "Check-32-CHY.png" : "cloud-32-NoCheck.png")" /> @(!Model.Approved ? "Duyệt PXK" : "Hủy duyệt PXK") </button>
            }
        </div>


        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")

    </div>
}

@helper MakeToolbar()
{
    if ((!GlobalEnums.CBPP && @Model.IsItem) || (GlobalEnums.CBPP && @Model.IsMaterial))
    {
        <button type="button" class="k-button" onclick="GetPendingMaterials()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Điều hàng theo lệnh sản xuất </button>
    }
    <button type="button" class="k-button" onclick="$('#kendoGridDetails').data('kendoGrid').addRow()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Thêm mặt hàng </button>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    function GetPendingMaterials() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action(@Model.IsItem ? "GetPendingWorkOrders" : "GetPendingBlendingInstructions", Model.ControllerName, new { area = "Inventories" })", "Chọn mã NVL cần điều", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }

    function callVoidDetail(transferOrderDetailID) {
        require(["kpopupWindow"], function (kpopupWindow) {
            var voidDetailWindow = new kpopupWindow();
            voidDetailWindow.openWindow($("#popupWindow"), "@Url.Action("VoidDetail", Model.ControllerName)" + "/" + $("#TransferOrderID").val() + "/" + transferOrderDetailID, "Hủy/ phục hồi một phần đề nghị giao hàng", @Settings.PopupWidthVoid,  @Settings.PopupHeightVoid);
        });
    }

    dataSourceChange = function (e) {
        var dataRow = e.items[0];
        if (e.field === "Quantity") {
            dataRow.set("QuantityRemains", DoRound(dataRow.Quantity - dataRow.QuantityIssued, requireConfig.websiteOptions.rndQuantity));
        }
        if (e.field === "QuantityRemains") {
            dataRow.set("Packages", dataRow["Weight"] * 1 > 0 ? DoRound(dataRow.QuantityRemains / dataRow["Weight"], requireConfig.websiteOptions.rndQuantity) : dataRow.QuantityRemains);
        }
    }    
</script>
