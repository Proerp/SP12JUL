@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Commons.ViewModels.BomViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.HiddenFor(model => model.BomID)

    <div class="left-panel" style="height:390px;"></div>

    <div class="right-first-panel">
        <div class="SBT-Hidden">
            @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Code)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.Code).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.Name).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EffectiveDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => model.EffectiveDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.EffectiveDate, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>

    @Html.EditorFor(d => d.Customer, new { CustomerDescriptionHidden = "true", CustomerDisplayName = @Model.GetDisplayName(m => m.Customer) })
    @Html.EditorFor(d => d.Commodity, new { CommodityDescriptionHidden = "true", CommodityDisplayCode = @Model.GetDisplayName(m => m.Commodity) })

    <div class="right-first-panel">
        <div style="clear: both; height: 27px; margin-top: 10px;"></div>
        <div class="div-k-grid-detail" style="width: 91%;">
            @(Html.Kendo().Grid(Model.BomViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {
                    columns.Bound(p => p.BomDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= BomDetailID #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].BomDetailID' value='#= BomDetailID #' />");
                    columns.Bound(p => p.BomID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= BomID #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].BomID' value='#= BomID #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(160)
                        .ClientTemplate("<div> #= CommodityCode #</div>" + "<input type='hidden' name='BomViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");

                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(218).HtmlAttributes(new { style = "" })
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");

                    columns.Bound(p => p.SalesUnit).DisplayNameTitle().Width(10).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" })
                        .ClientTemplate("<div> #= SalesUnit #</div>" + "<input type='hidden' name='BomViewDetails[#= index(data) #].SalesUnit' value='#= SalesUnit #' />");
                    
                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                    columns.Bound(p => p.Quantity).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />")
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #");

                    columns.Bound(p => p.LayerCode).DisplayNameTitle().Width(36).HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" })
                        .ClientTemplate("#= (LayerCode == null)? '' : LayerCode #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].LayerCode' value='#= (LayerCode == null) ? '' : LayerCode #' />");

                    columns.Bound(p => p.BlockUnit).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmN0)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', BlockUnit) #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].BlockUnit' value='#= BlockUnit #' />");

                    //columns.Bound(p => p.MajorStaple).DisplayNameTitle()
                    //    .ClientTemplate("#= MajorStaple ? checked='checked':'' #" + "<input class='GridCheckbox' type='checkbox' name='BomViewDetails[#= index(data) #].MajorStaple' value='#= MajorStaple #' />");
                    //columns.Bound(p => p.MajorStaple).DisplayNameTitle().ClientTemplate("#= MajorStaple ? checked='checked':'' #  <input class='GridCheckbox' type='checkbox' name='BomViewDetails[#= index(data) #].MajorStaple' value='#= MajorStaple #' />").HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(39);
                    columns.Template(t => { }).Title("NVL chính").ClientTemplate("<input id = 'MajorStaple' class='GridCheckbox' #= MajorStaple ? checked='checked':'' #  type='checkbox' name='BomViewDetails[#= index(data) #].MajorStaple' value='#= MajorStaple #' />").HtmlAttributes(new { @class = "grid-column-center", @readonly = "readonly" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(39);

                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(10).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });
                })
                .Filterable(e => e.Enabled(false))
                .Navigatable()

                .ToolBar(toolbar =>
                {
                    if (Model.Editable)
                    {
                        toolbar.Template(@<text>
                            <button type="button" class="k-button" onclick="$('#kendoGridDetails').data('kendoGrid').addRow()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Thêm NVL </button>
                            <span style="float:right"> @Html.Partial("~/Views/Helpers/Commons/_Import.cshtml") </span>
                        </text>);
                    }
                    else
                    {
                        toolbar.Template(@<text> @Commons.Toolbars.BlankToolbar() </text>);
                    }
                })

                .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                .Selectable(settings =>
                {
                    settings.Mode(GridSelectionMode.Multiple);
                    settings.Type(GridSelectionType.Row);
                })
                .Events(events =>
                        {
                            events.DataBound("colorLayerCode");
                        })
                .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                .ServerOperation(false)
                .Model(model =>
                {
                    model.Id(x => x.BomDetailID);
                    model.Field(m => m.BomDetailID).DefaultValue(0);
                    model.Field(m => m.BomID).DefaultValue(@Model.BomID);
                })
                .Events(events =>
                {
                    events.Change("dataSourceChange");
                    events.Error("kendGrid_ErrorHandler");
                })
                .Aggregates(a => a.Add(x => x.CommodityName).Count())
                .Aggregates(a => a.Add(x => x.Quantity).Sum())
                .Aggregates(a => a.Add(x => x.BlockUnit).Sum())
                )
            )
        </div>

        <div class="div-k-panel" style="width: 91%;">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Description)
                                <div class="div-input">
                                    @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @style = "width: 100%;" })
                                </div>
                                <div class="div-validation-message">
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Remarks)
                                <div class="div-input">
                                    @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @style = "width: 100%;" })
                                </div>
                                <div class="div-validation-message">
                                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>

        <div class="left-panel-input">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "Boms")"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Save" formaction="@Url.Action("Edit", "Boms")"> <img src="~/Content/Images/New/Save-Slide.png" /> Lưu & nhập ds màng </button>
            }
                                                                                                                                                                                                    
            @if (Model.CommodityID > 0)
            {<button type="button" class="k-button custom-button" onclick="ShowBoms()"> <img src="~/Content/Images/New/2017/bom-32.png" /> Danh sách màng </button>}
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")
    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>
<script src="@Url.Content("~/Scripts/Controllers/Commons/Boms/Import.js")"></script>
<script src="@Url.Content("~/Scripts/Controllers/Commons/Boms/ColorLayerCode.js")"></script>

<script type="text/javascript">
    $('#kendoGridDetails').on('click', '.GridCheckbox', function () {
        var grid = $('#kendoGridDetails').data().kendoGrid;
        var dataItem = grid.dataItem($(this).closest('tr'));

        dataItem.set("MajorStaple", $(this).is(':checked') ? 1 : 0);
    })
    
    dataSourceChange = function (e) {
        if (e.field === "LayerCode") {
            colorLayerCode(e);
        }
    }

    function ShowBoms() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("Commodities", "Boms", new { area = "Commons", id = Model.BomID })", "Danh sách màng", "@Settings.PopupWidth", "@Settings.PopupHeightWithTab");
        });
    }

    window.urlCustomersApi = '@Url.Action("GetCustomerBasesImport", "CustomerAPIs", new { area = "Commons" })';
    window.urlCommoditiesApi = '@Url.Action("GetCommodityBasesImport", "CommodityAPIs", new { area = "Commons" })';
</script>

<style>
    .right-panel-label-icon-only, .right-second-panel {
        display: none;
    }

    .right-panel-input {
        width: 91%;
    }

    .default-display-none {
        display: inherit;
    }
</style>