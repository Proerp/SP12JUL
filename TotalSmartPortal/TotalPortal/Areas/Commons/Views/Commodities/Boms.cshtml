@using TotalBase.Enums;
@using TotalPortal.Configuration;

@using TotalDTO
@using TotalDTO.Commons
@using TotalModel.Models;
@using TotalPortal.Areas.Commons.ViewModels

@{Layout = "~/Views/Shared/_LayoutPopup.cshtml";}

@model  ICommodityViewModel


@Html.HiddenFor(model => (model as ICommodityBaseDTO).CommodityID)
@Html.HiddenFor(model => (model as ICommodityPrimitiveDTO).CommodityTypeID)
@Html.HiddenFor(model => (model as IBaseDTO).Editable)

<div class="left-panel">
    <div style="padding-left: 48px; padding-top: 16px; "> <img src="~/Content/Images/New/2017/bom-64.png" /> </div>
</div>
<div class="right-panel">
    <div class="right-first-panel">
        @if (!Model.IsItem)
        {
            <div class="form-group">
                @Html.LabelFor(model => (model as ICommodityPrimitiveDTO).CodePartA)
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => (model as ICommodityPrimitiveDTO).CodePartA).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => (model as ICommodityPrimitiveDTO).CodePartA, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/CommodityCategory.cshtml", @Model, new ViewDataDictionary { { "CommodityCategoryReadonly", true } })
        @if (Model.IsItem)
        {
            <div class="form-group">
                @Html.Label("Số phiên bản công thức")
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => (model as ICommodityPrimitiveDTO).CodePartA).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => (model as ICommodityPrimitiveDTO).CodePartA, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group" style="padding-top: 16px;">
            @Html.EditorFor(d => (d as ICommodityPrimitiveDTO).Bom, new { BomDisplayName = "Vui lòng chọn " + (Model.IsItem ? "công thức" : "loại màng") + ", sau đó nhấn 'Thêm vào'", BomLeftPanelInput = "left-panel-input" })
        </div>
    </div>

    <div class="right-second-panel">
        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/CommodityLine.cshtml", @Model, new ViewDataDictionary { { "CommodityLineReadonly", true } })
        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/CommodityClass.cshtml", @Model, new ViewDataDictionary { { "CommodityClassReadonly", true } })

        <div class="form-group" style="padding-top: 16px;">
            @Html.Label(" ")
            <div class="div-input">
                <button type="button" class="k-button left-panel-input" onclick="CallAddCommodityBom()"> <img src="~/Content/Images/New/2017/bom-24.png" /> Thêm vào: @(@Model.Code.Length <= 38 ? @Model.Code : @Model.Code.Substring(0, 37)) </button>
            </div>
        </div>
    </div>

</div>

<div class="form-group">
    @(Html.Kendo().Grid<CommodityBom>()
    .Name("gridBoms")
    .Columns(columns =>
    {
        columns.Bound(c => c.CommodityBomID).Hidden();
        columns.Bound(c => c.BomID).Hidden();
        columns.Bound(c => c.BomCode).Title("Mã").Width(82).HtmlAttributes(new { @readonly = "readonly" }).EditorTemplateName("StringReadonly");
        columns.Bound(c => c.BomName).Title("Tên").Width(96).HtmlAttributes(new { @readonly = "readonly" }).EditorTemplateName("StringReadonly");

        columns.Bound(c => c.EntryDate).Title("Ngày thêm").Width(60).Format("{0:" + Settings.DateTimeFormat + "}").HtmlAttributes(new { @class = "grid-column-center", @readonly = "readonly" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).EditorTemplateName("DateTimeReadonly");

        columns.Bound(c => c.BlockUnit).Title("SL").HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(27).Hidden()
            .Format(Settings.kfmN0)
            .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', BlockUnit) #" + "<input type='hidden' name='CommodityBom.BlockUnit' value='#= BlockUnit #' />")
            .EditorTemplateName("Quantity");
        columns.Bound(c => c.BlockQuantity).Title("TL").HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(27).Hidden()
            .Format(Settings.kfmQuantity)
            .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', BlockQuantity) #" + "<input type='hidden' name='CommodityBom.BlockQuantity' value='#= BlockQuantity #' />")
            .EditorTemplateName("Quantity");

        columns.Bound(c => c.Remarks).Title("Ghi chú").Width(160);
        columns.Template(t => { }).Title("Mặc định").ClientTemplate("<input id = 'IsDefault' class='GridCheckbox' #= IsDefault ? checked='checked':'' #  type='checkbox' />").HtmlAttributes(new { @class = "grid-column-center", @readonly = "readonly" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(39);

        columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(20)
            .ClientTemplate("<a class='k-button' style='padding-left:0px; padding-right:0px' onclick='RemoveCommodityBom(#=CommodityBomID#)'><span class='k-icon sbt-delete'></span></a>");
    })

    .Scrollable(s => s.Height(219))
    .DataSource(ds => ds.Ajax()
        .Model(model => model.Id(x => x.CommodityBomID))
        .Read(read => read.Action("GetCommodityBoms", "BomAPIs", new { area = "Commons" }).Data(@<text>
            function (e) {
            return {
                bomID: null,
                commodityID: $("#CommodityID").val()
            };}
        </text>))
        .ServerOperation(true))
        .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell); })
        .Selectable()
        .Events(events => { events.Save("SaveCommodityBom"); })
    )

</div>


<div class="background-bar" style="height: 45px;">
    <div class="popup-button-bar">
        <button type="button" class="k-button" onclick="window.parent.$('#myWindow').data('kendoWindow').close()"> <img src="~/Content/Images/Mains/Size24/Users-Exit-icon-24.png" /> Đóng </button>
    </div>
</div>

<script src="@Url.Content("~/Scripts/Controllers/Commons/Commodities/CommodityBom.js")"></script>

<script type="text/javascript">
    function CallAddCommodityBom(e) {
        AddCommodityBom($("#Bom_BomID").val(), $("#CommodityID").val());
    }

    window.urlAddCommodityBom = '@Url.Action("AddCommodityBom", "BomAPIs", new { area = "Commons" })';
    window.urlRemoveCommodityBom = '@Url.Action("RemoveCommodityBom", "BomAPIs", new { area = "Commons" })';
    window.urlUpdateCommodityBom = '@Url.Action("UpdateCommodityBom", "BomAPIs", new { area = "Commons" })';
</script>

<style>
    .right-first-panel {
        padding-right: 30px;
    }

    .right-second-panel {
        padding-top: 1px;
        padding-right: 13px;
    }

    .left-panel-input {
        width: 100%;
    }
</style>